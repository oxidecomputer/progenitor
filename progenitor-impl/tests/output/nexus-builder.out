#[allow(unused_imports)]
use progenitor_client::{encode_path, RequestBuilderExt};
pub use progenitor_client::{ByteStream, Error, ResponseValue};
pub mod types {
    use serde::{Deserialize, Serialize};
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct BlockSize(i64);
    impl std::ops::Deref for BlockSize {
        type Target = i64;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    impl std::convert::TryFrom<i64> for BlockSize {
        type Error = &'static str;
        fn try_from(value: i64) -> Result<Self, Self::Error> {
            if ![512_i64, 2048_i64, 4096_i64].contains(&value) {
                Err("invalid value")
            } else {
                Ok(Self(value))
            }
        }
    }

    ///A count of bytes, typically used either for memory or storage capacity
    ///
    ///The maximum supported byte count is [`i64::MAX`].  This makes it
    /// somewhat inconvenient to define constructors: a u32 constructor can be
    /// infallible, but an i64 constructor can fail (if the value is negative)
    /// and a u64 constructor can fail (if the value is larger than i64::MAX).
    /// We provide all of these for consumers' convenience.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct ByteCount(pub u64);
    impl std::ops::Deref for ByteCount {
        type Target = u64;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    ///The type of an individual datum of a metric.
    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum DatumType {
        #[serde(rename = "bool")]
        Bool,
        #[serde(rename = "i64")]
        I64,
        #[serde(rename = "f64")]
        F64,
        #[serde(rename = "string")]
        String,
        #[serde(rename = "bytes")]
        Bytes,
        #[serde(rename = "cumulative_i64")]
        CumulativeI64,
        #[serde(rename = "cumulative_f64")]
        CumulativeF64,
        #[serde(rename = "histogram_i64")]
        HistogramI64,
        #[serde(rename = "histogram_f64")]
        HistogramF64,
    }

    impl ToString for DatumType {
        fn to_string(&self) -> String {
            match *self {
                Self::Bool => "bool".to_string(),
                Self::I64 => "i64".to_string(),
                Self::F64 => "f64".to_string(),
                Self::String => "string".to_string(),
                Self::Bytes => "bytes".to_string(),
                Self::CumulativeI64 => "cumulative_i64".to_string(),
                Self::CumulativeF64 => "cumulative_f64".to_string(),
                Self::HistogramI64 => "histogram_i64".to_string(),
                Self::HistogramF64 => "histogram_f64".to_string(),
            }
        }
    }

    impl std::str::FromStr for DatumType {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "bool" => Ok(Self::Bool),
                "i64" => Ok(Self::I64),
                "f64" => Ok(Self::F64),
                "string" => Ok(Self::String),
                "bytes" => Ok(Self::Bytes),
                "cumulative_i64" => Ok(Self::CumulativeI64),
                "cumulative_f64" => Ok(Self::CumulativeF64),
                "histogram_i64" => Ok(Self::HistogramI64),
                "histogram_f64" => Ok(Self::HistogramF64),
                _ => Err("invalid value"),
            }
        }
    }

    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct DerEncodedKeyPair {
        ///request signing private key (base64 encoded der file)
        pub private_key: String,
        ///request signing public certificate (base64 encoded der file)
        pub public_cert: String,
    }

    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct DeviceAccessTokenRequest {
        pub client_id: uuid::Uuid,
        pub device_code: String,
        pub grant_type: String,
    }

    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct DeviceAuthRequest {
        pub client_id: uuid::Uuid,
    }

    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct DeviceAuthVerify {
        pub user_code: String,
    }

    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct Digest {
        #[serde(rename = "type")]
        pub type_: DigestType,
        pub value: String,
    }

    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum DigestType {
        #[serde(rename = "sha256")]
        Sha256,
    }

    impl ToString for DigestType {
        fn to_string(&self) -> String {
            match *self {
                Self::Sha256 => "sha256".to_string(),
            }
        }
    }

    impl std::str::FromStr for DigestType {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "sha256" => Ok(Self::Sha256),
                _ => Err("invalid value"),
            }
        }
    }

    ///Client view of a [`Disk`]
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct Disk {
        pub block_size: ByteCount,
        ///human-readable free-form text about a resource
        pub description: String,
        pub device_path: String,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub image_id: Option<uuid::Uuid>,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        pub project_id: uuid::Uuid,
        pub size: ByteCount,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub snapshot_id: Option<uuid::Uuid>,
        pub state: DiskState,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    ///Create-time parameters for a
    /// [`Disk`](omicron_common::api::external::Disk)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct DiskCreate {
        pub description: String,
        ///initial source for this disk
        pub disk_source: DiskSource,
        pub name: Name,
        ///total size of the Disk in bytes
        pub size: ByteCount,
    }

    ///Parameters for the [`Disk`](omicron_common::api::external::Disk) to be
    /// attached or detached to an instance
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct DiskIdentifier {
        pub name: Name,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct DiskResultsPage {
        ///list of items on this page of results
        pub items: Vec<Disk>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///Different sources for a disk
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    #[serde(tag = "type")]
    pub enum DiskSource {
        ///Create a blank disk
        #[serde(rename = "blank")]
        Blank {
            ///size of blocks for this Disk. valid values are: 512, 2048, or
            /// 4096
            block_size: BlockSize,
        },
        ///Create a disk from a disk snapshot
        #[serde(rename = "snapshot")]
        Snapshot { snapshot_id: uuid::Uuid },
        ///Create a disk from a project image
        #[serde(rename = "image")]
        Image { image_id: uuid::Uuid },
        ///Create a disk from a global image
        #[serde(rename = "global_image")]
        GlobalImage { image_id: uuid::Uuid },
    }

    ///State of a Disk (primarily: attached or not)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    #[serde(tag = "state", content = "instance")]
    pub enum DiskState {
        #[serde(rename = "creating")]
        Creating,
        #[serde(rename = "detached")]
        Detached,
        ///Disk is being attached to the given Instance
        #[serde(rename = "attaching")]
        Attaching(uuid::Uuid),
        ///Disk is attached to the given Instance
        #[serde(rename = "attached")]
        Attached(uuid::Uuid),
        ///Disk is being detached from the given Instance
        #[serde(rename = "detaching")]
        Detaching(uuid::Uuid),
        #[serde(rename = "destroyed")]
        Destroyed,
        #[serde(rename = "faulted")]
        Faulted,
    }

    ///OS image distribution
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct Distribution {
        ///The name of the distribution (e.g. "alpine" or "ubuntu")
        pub name: Name,
        ///The version of the distribution (e.g. "3.10" or "18.04")
        pub version: String,
    }

    ///Error information from a response.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct Error {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub error_code: Option<String>,
        pub message: String,
        pub request_id: String,
    }

    ///The name and type information for a field of a timeseries schema.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct FieldSchema {
        pub name: String,
        pub source: FieldSource,
        pub ty: FieldType,
    }

    ///The source from which a field is derived, the target or metric.
    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum FieldSource {
        #[serde(rename = "target")]
        Target,
        #[serde(rename = "metric")]
        Metric,
    }

    impl ToString for FieldSource {
        fn to_string(&self) -> String {
            match *self {
                Self::Target => "target".to_string(),
                Self::Metric => "metric".to_string(),
            }
        }
    }

    impl std::str::FromStr for FieldSource {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "target" => Ok(Self::Target),
                "metric" => Ok(Self::Metric),
                _ => Err("invalid value"),
            }
        }
    }

    ///The `FieldType` identifies the data type of a target or metric field.
    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum FieldType {
        #[serde(rename = "string")]
        String,
        #[serde(rename = "i64")]
        I64,
        #[serde(rename = "ip_addr")]
        IpAddr,
        #[serde(rename = "uuid")]
        Uuid,
        #[serde(rename = "bool")]
        Bool,
    }

    impl ToString for FieldType {
        fn to_string(&self) -> String {
            match *self {
                Self::String => "string".to_string(),
                Self::I64 => "i64".to_string(),
                Self::IpAddr => "ip_addr".to_string(),
                Self::Uuid => "uuid".to_string(),
                Self::Bool => "bool".to_string(),
            }
        }
    }

    impl std::str::FromStr for FieldType {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "string" => Ok(Self::String),
                "i64" => Ok(Self::I64),
                "ip_addr" => Ok(Self::IpAddr),
                "uuid" => Ok(Self::Uuid),
                "bool" => Ok(Self::Bool),
                _ => Err("invalid value"),
            }
        }
    }

    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum FleetRole {
        #[serde(rename = "admin")]
        Admin,
        #[serde(rename = "collaborator")]
        Collaborator,
        #[serde(rename = "viewer")]
        Viewer,
    }

    impl ToString for FleetRole {
        fn to_string(&self) -> String {
            match *self {
                Self::Admin => "admin".to_string(),
                Self::Collaborator => "collaborator".to_string(),
                Self::Viewer => "viewer".to_string(),
            }
        }
    }

    impl std::str::FromStr for FleetRole {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "admin" => Ok(Self::Admin),
                "collaborator" => Ok(Self::Collaborator),
                "viewer" => Ok(Self::Viewer),
                _ => Err("invalid value"),
            }
        }
    }

    ///Client view of a [`Policy`], which describes how this resource may be
    /// accessed
    ///
    ///Note that the Policy only describes access granted explicitly for this
    /// resource.  The policies of parent resources can also cause a user to
    /// have access to this resource.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct FleetRolePolicy {
        ///Roles directly assigned on this resource
        pub role_assignments: Vec<FleetRoleRoleAssignment>,
    }

    ///Describes the assignment of a particular role on a particular resource
    /// to a particular identity (user, group, etc.)
    ///
    ///The resource is not part of this structure.  Rather, [`RoleAssignment`]s
    /// are put into a [`Policy`] and that Policy is applied to a particular
    /// resource.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct FleetRoleRoleAssignment {
        pub identity_id: uuid::Uuid,
        pub identity_type: IdentityType,
        pub role_name: FleetRole,
    }

    ///Client view of global Images
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct GlobalImage {
        ///size of blocks in bytes
        pub block_size: ByteCount,
        ///human-readable free-form text about a resource
        pub description: String,
        ///Hash of the image contents, if applicable
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub digest: Option<Digest>,
        ///Image distribution
        pub distribution: String,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        ///total size in bytes
        pub size: ByteCount,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
        ///URL source of this image, if any
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub url: Option<String>,
        ///Image version
        pub version: String,
    }

    ///Create-time parameters for an
    /// [`GlobalImage`](omicron_common::api::external::GlobalImage)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct GlobalImageCreate {
        ///block size in bytes
        pub block_size: BlockSize,
        pub description: String,
        ///OS image distribution
        pub distribution: Distribution,
        pub name: Name,
        ///The source of the image's contents.
        pub source: ImageSource,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct GlobalImageResultsPage {
        ///list of items on this page of results
        pub items: Vec<GlobalImage>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///Supported set of sort modes for scanning by id only.
    ///
    ///Currently, we only support scanning in ascending order.
    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum IdSortMode {
        #[serde(rename = "id_ascending")]
        IdAscending,
    }

    impl ToString for IdSortMode {
        fn to_string(&self) -> String {
            match *self {
                Self::IdAscending => "id_ascending".to_string(),
            }
        }
    }

    impl std::str::FromStr for IdSortMode {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "id_ascending" => Ok(Self::IdAscending),
                _ => Err("invalid value"),
            }
        }
    }

    ///Client view of an [`IdentityProvider`]
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct IdentityProvider {
        ///human-readable free-form text about a resource
        pub description: String,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        ///Identity provider type
        pub provider_type: IdentityProviderType,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct IdentityProviderResultsPage {
        ///list of items on this page of results
        pub items: Vec<IdentityProvider>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum IdentityProviderType {
        #[serde(rename = "saml")]
        Saml,
    }

    impl ToString for IdentityProviderType {
        fn to_string(&self) -> String {
            match *self {
                Self::Saml => "saml".to_string(),
            }
        }
    }

    impl std::str::FromStr for IdentityProviderType {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "saml" => Ok(Self::Saml),
                _ => Err("invalid value"),
            }
        }
    }

    ///Describes what kind of identity is described by an id
    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum IdentityType {
        #[serde(rename = "silo_user")]
        SiloUser,
    }

    impl ToString for IdentityType {
        fn to_string(&self) -> String {
            match *self {
                Self::SiloUser => "silo_user".to_string(),
            }
        }
    }

    impl std::str::FromStr for IdentityType {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "silo_user" => Ok(Self::SiloUser),
                _ => Err("invalid value"),
            }
        }
    }

    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    #[serde(tag = "type")]
    pub enum IdpMetadataSource {
        #[serde(rename = "url")]
        Url { url: String },
        #[serde(rename = "base64_encoded_xml")]
        Base64EncodedXml { data: String },
    }

    ///Client view of project Images
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct Image {
        ///size of blocks in bytes
        pub block_size: ByteCount,
        ///human-readable free-form text about a resource
        pub description: String,
        ///Hash of the image contents, if applicable
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub digest: Option<Digest>,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        ///The project the disk belongs to
        pub project_id: uuid::Uuid,
        ///total size in bytes
        pub size: ByteCount,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
        ///URL source of this image, if any
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub url: Option<String>,
        ///Version of this, if any
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub version: Option<String>,
    }

    ///Create-time parameters for an
    /// [`Image`](omicron_common::api::external::Image)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct ImageCreate {
        ///block size in bytes
        pub block_size: BlockSize,
        pub description: String,
        pub name: Name,
        ///The source of the image's contents.
        pub source: ImageSource,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct ImageResultsPage {
        ///list of items on this page of results
        pub items: Vec<Image>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///The source of the underlying image.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    #[serde(tag = "type")]
    pub enum ImageSource {
        #[serde(rename = "url")]
        Url { url: String },
        #[serde(rename = "snapshot")]
        Snapshot { id: uuid::Uuid },
        #[serde(rename = "you_can_boot_anything_as_long_as_its_alpine")]
        YouCanBootAnythingAsLongAsItsAlpine,
    }

    ///Client view of an [`Instance`]
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct Instance {
        ///human-readable free-form text about a resource
        pub description: String,
        ///RFC1035-compliant hostname for the Instance.
        pub hostname: String,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///memory allocated for this Instance
        pub memory: ByteCount,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        ///number of CPUs allocated for this Instance
        pub ncpus: InstanceCpuCount,
        ///id for the project containing this Instance
        pub project_id: uuid::Uuid,
        pub run_state: InstanceState,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
        pub time_run_state_updated: chrono::DateTime<chrono::offset::Utc>,
    }

    ///The number of CPUs in an Instance
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct InstanceCpuCount(pub u16);
    impl std::ops::Deref for InstanceCpuCount {
        type Target = u16;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    ///Create-time parameters for an
    /// [`Instance`](omicron_common::api::external::Instance)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct InstanceCreate {
        pub description: String,
        ///The disks to be created or attached for this instance.
        #[serde(default, skip_serializing_if = "Vec::is_empty")]
        pub disks: Vec<InstanceDiskAttachment>,
        pub hostname: String,
        pub memory: ByteCount,
        pub name: Name,
        pub ncpus: InstanceCpuCount,
        ///The network interfaces to be created for this instance.
        #[serde(default = "instance_create_network_interfaces")]
        pub network_interfaces: InstanceNetworkInterfaceAttachment,
        ///User data for instance initialization systems (such as cloud-init).
        /// Must be a Base64-encoded string, as specified in RFC 4648 § 4 (+ and
        /// / characters with padding). Maximum 32 KiB unencoded data.
        #[serde(default)]
        pub user_data: String,
    }

    fn instance_create_network_interfaces() -> InstanceNetworkInterfaceAttachment {
        InstanceNetworkInterfaceAttachment::Default
    }

    ///Describe the instance's disks at creation time
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    #[serde(tag = "type")]
    pub enum InstanceDiskAttachment {
        ///During instance creation, create and attach disks
        #[serde(rename = "create")]
        Create {
            description: String,
            ///initial source for this disk
            disk_source: DiskSource,
            name: Name,
            ///total size of the Disk in bytes
            size: ByteCount,
        },
        ///During instance creation, attach this disk
        #[serde(rename = "attach")]
        Attach {
            ///A disk name to attach
            name: Name,
        },
    }

    ///Migration parameters for an
    /// [`Instance`](omicron_common::api::external::Instance)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct InstanceMigrate {
        pub dst_sled_id: uuid::Uuid,
    }

    ///Describes an attachment of a `NetworkInterface` to an `Instance`, at the
    /// time the instance is created.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    #[serde(tag = "type", content = "params")]
    pub enum InstanceNetworkInterfaceAttachment {
        ///Create one or more `NetworkInterface`s for the `Instance`.
        ///
        ///If more than one interface is provided, then the first will be
        /// designated the primary interface for the instance.
        #[serde(rename = "create")]
        Create(Vec<NetworkInterfaceCreate>),
        #[serde(rename = "default")]
        Default,
        #[serde(rename = "none")]
        None,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct InstanceResultsPage {
        ///list of items on this page of results
        pub items: Vec<Instance>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///Contents of an Instance's serial console buffer.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct InstanceSerialConsoleData {
        ///The bytes starting from the requested offset up to either the end of
        /// the buffer or the request's `max_bytes`. Provided as a u8 array
        /// rather than a string, as it may not be UTF-8.
        pub data: Vec<u8>,
        ///The absolute offset since boot (suitable for use as `byte_offset` in
        /// a subsequent request) of the last byte returned in `data`.
        pub last_byte_offset: u64,
    }

    ///Running state of an Instance (primarily: booted or stopped)
    ///
    ///This typically reflects whether it's starting, running, stopping, or
    /// stopped, but also includes states related to the Instance's lifecycle
    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum InstanceState {
        #[serde(rename = "creating")]
        Creating,
        #[serde(rename = "starting")]
        Starting,
        #[serde(rename = "running")]
        Running,
        #[serde(rename = "stopping")]
        Stopping,
        #[serde(rename = "stopped")]
        Stopped,
        #[serde(rename = "rebooting")]
        Rebooting,
        #[serde(rename = "migrating")]
        Migrating,
        #[serde(rename = "repairing")]
        Repairing,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "destroyed")]
        Destroyed,
    }

    impl ToString for InstanceState {
        fn to_string(&self) -> String {
            match *self {
                Self::Creating => "creating".to_string(),
                Self::Starting => "starting".to_string(),
                Self::Running => "running".to_string(),
                Self::Stopping => "stopping".to_string(),
                Self::Stopped => "stopped".to_string(),
                Self::Rebooting => "rebooting".to_string(),
                Self::Migrating => "migrating".to_string(),
                Self::Repairing => "repairing".to_string(),
                Self::Failed => "failed".to_string(),
                Self::Destroyed => "destroyed".to_string(),
            }
        }
    }

    impl std::str::FromStr for InstanceState {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "creating" => Ok(Self::Creating),
                "starting" => Ok(Self::Starting),
                "running" => Ok(Self::Running),
                "stopping" => Ok(Self::Stopping),
                "stopped" => Ok(Self::Stopped),
                "rebooting" => Ok(Self::Rebooting),
                "migrating" => Ok(Self::Migrating),
                "repairing" => Ok(Self::Repairing),
                "failed" => Ok(Self::Failed),
                "destroyed" => Ok(Self::Destroyed),
                _ => Err("invalid value"),
            }
        }
    }

    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    #[serde(untagged)]
    pub enum IpNet {
        V4(Ipv4Net),
        V6(Ipv6Net),
    }

    impl std::convert::TryFrom<&str> for IpNet {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, Self::Error> {
            Err("")
                .or_else(|_: Self::Error| Ok(Self::V4(Ipv4Net::try_from(value)?)))
                .or_else(|_: Self::Error| Ok(Self::V6(Ipv6Net::try_from(value)?)))
                .or_else(|_: Self::Error| Err("string conversion failed for all variants"))
        }
    }

    impl std::convert::TryFrom<String> for IpNet {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, Self::Error> {
            Self::try_from(value.as_str())
        }
    }

    ///Identity-related metadata that's included in nearly all public API
    /// objects
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct IpPool {
        ///human-readable free-form text about a resource
        pub description: String,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    ///Create-time parameters for an IP Pool.
    ///
    ///See [`IpPool`](omicron_nexus::external_api::views::IpPool)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct IpPoolCreate {
        pub description: String,
        pub name: Name,
    }

    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct IpPoolRange {
        pub id: uuid::Uuid,
        pub range: IpRange,
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct IpPoolRangeResultsPage {
        ///list of items on this page of results
        pub items: Vec<IpPoolRange>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct IpPoolResultsPage {
        ///list of items on this page of results
        pub items: Vec<IpPool>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///Parameters for updating an IP Pool
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct IpPoolUpdate {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub name: Option<Name>,
    }

    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    #[serde(untagged)]
    pub enum IpRange {
        V4(Ipv4Range),
        V6(Ipv6Range),
    }

    ///An IPv4 subnet, including prefix and subnet mask
    #[derive(Clone, Debug, Serialize, JsonSchema)]
    pub struct Ipv4Net(String);
    impl std::ops::Deref for Ipv4Net {
        type Target = String;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    impl std::convert::TryFrom<&str> for Ipv4Net {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, Self::Error> {
            if regress :: Regex :: new ("^(10\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\/([8-9]|1[0-9]|2[0-9]|3[0-2])|172\\.(1[6-9]|2[0-9]|3[0-1])\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\/(1[2-9]|2[0-9]|3[0-2])|192\\.168\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\/(1[6-9]|2[0-9]|3[0-2]))$") . unwrap () . find (value) . is_none () { return Err ("doesn't match pattern \"^(10\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\/([8-9]|1[0-9]|2[0-9]|3[0-2])|172\\.(1[6-9]|2[0-9]|3[0-1])\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\/(1[2-9]|2[0-9]|3[0-2])|192\\.168\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\/(1[6-9]|2[0-9]|3[0-2]))$\"") ; }
            Ok(Self(value.to_string()))
        }
    }

    impl std::convert::TryFrom<String> for Ipv4Net {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, Self::Error> {
            Self::try_from(value.as_str())
        }
    }

    impl<'de> serde::Deserialize<'de> for Ipv4Net {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            Self::try_from(String::deserialize(deserializer)?)
                .map_err(|e| <D::Error as serde::de::Error>::custom(e.to_string()))
        }
    }

    ///A non-decreasing IPv4 address range, inclusive of both ends.
    ///
    ///The first address must be less than or equal to the last address.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct Ipv4Range {
        pub first: std::net::Ipv4Addr,
        pub last: std::net::Ipv4Addr,
    }

    ///An IPv6 subnet, including prefix and subnet mask
    #[derive(Clone, Debug, Serialize, JsonSchema)]
    pub struct Ipv6Net(String);
    impl std::ops::Deref for Ipv6Net {
        type Target = String;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    impl std::convert::TryFrom<&str> for Ipv6Net {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, Self::Error> {
            if regress :: Regex :: new ("^([fF][dD])[0-9a-fA-F]{2}:(([0-9a-fA-F]{1,4}:){6}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,6}:)\\/(6[4-9]|[7-9][0-9]|1[0-1][0-9]|12[0-6])$") . unwrap () . find (value) . is_none () { return Err ("doesn't match pattern \"^([fF][dD])[0-9a-fA-F]{2}:(([0-9a-fA-F]{1,4}:){6}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,6}:)\\/(6[4-9]|[7-9][0-9]|1[0-1][0-9]|12[0-6])$\"") ; }
            Ok(Self(value.to_string()))
        }
    }

    impl std::convert::TryFrom<String> for Ipv6Net {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, Self::Error> {
            Self::try_from(value.as_str())
        }
    }

    impl<'de> serde::Deserialize<'de> for Ipv6Net {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            Self::try_from(String::deserialize(deserializer)?)
                .map_err(|e| <D::Error as serde::de::Error>::custom(e.to_string()))
        }
    }

    ///A non-decreasing IPv6 address range, inclusive of both ends.
    ///
    ///The first address must be less than or equal to the last address.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct Ipv6Range {
        pub first: std::net::Ipv6Addr,
        pub last: std::net::Ipv6Addr,
    }

    ///An inclusive-inclusive range of IP ports. The second port may be omitted
    /// to represent a single port
    #[derive(Clone, Debug, Serialize, JsonSchema)]
    pub struct L4PortRange(String);
    impl std::ops::Deref for L4PortRange {
        type Target = String;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    impl std::convert::TryFrom<&str> for L4PortRange {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, Self::Error> {
            if value.len() > 11usize {
                return Err("longer than 11 characters");
            }
            if value.len() < 1usize {
                return Err("shorter than 1 characters");
            }
            if regress::Regex::new("^[0-9]{1,5}(-[0-9]{1,5})?$")
                .unwrap()
                .find(value)
                .is_none()
            {
                return Err("doesn't match pattern \"^[0-9]{1,5}(-[0-9]{1,5})?$\"");
            }
            Ok(Self(value.to_string()))
        }
    }

    impl std::convert::TryFrom<String> for L4PortRange {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, Self::Error> {
            Self::try_from(value.as_str())
        }
    }

    impl<'de> serde::Deserialize<'de> for L4PortRange {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            Self::try_from(String::deserialize(deserializer)?)
                .map_err(|e| <D::Error as serde::de::Error>::custom(e.to_string()))
        }
    }

    ///A Media Access Control address, in EUI-48 format
    #[derive(Clone, Debug, Serialize, JsonSchema)]
    pub struct MacAddr(String);
    impl std::ops::Deref for MacAddr {
        type Target = String;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    impl std::convert::TryFrom<&str> for MacAddr {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, Self::Error> {
            if value.len() > 17usize {
                return Err("longer than 17 characters");
            }
            if value.len() < 17usize {
                return Err("shorter than 17 characters");
            }
            if regress::Regex::new("^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$")
                .unwrap()
                .find(value)
                .is_none()
            {
                return Err("doesn't match pattern \"^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$\"");
            }
            Ok(Self(value.to_string()))
        }
    }

    impl std::convert::TryFrom<String> for MacAddr {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, Self::Error> {
            Self::try_from(value.as_str())
        }
    }

    impl<'de> serde::Deserialize<'de> for MacAddr {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            Self::try_from(String::deserialize(deserializer)?)
                .map_err(|e| <D::Error as serde::de::Error>::custom(e.to_string()))
        }
    }

    ///Names must begin with a lower case ASCII letter, be composed exclusively
    /// of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end
    /// with a '-'.
    #[derive(Clone, Debug, Serialize, JsonSchema)]
    pub struct Name(String);
    impl std::ops::Deref for Name {
        type Target = String;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    impl std::convert::TryFrom<&str> for Name {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, Self::Error> {
            if value.len() > 63usize {
                return Err("longer than 63 characters");
            }
            if regress::Regex::new("^[a-z](|[a-zA-Z0-9-]*[a-zA-Z0-9])$")
                .unwrap()
                .find(value)
                .is_none()
            {
                return Err("doesn't match pattern \"^[a-z](|[a-zA-Z0-9-]*[a-zA-Z0-9])$\"");
            }
            Ok(Self(value.to_string()))
        }
    }

    impl std::convert::TryFrom<String> for Name {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, Self::Error> {
            Self::try_from(value.as_str())
        }
    }

    impl<'de> serde::Deserialize<'de> for Name {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            Self::try_from(String::deserialize(deserializer)?)
                .map_err(|e| <D::Error as serde::de::Error>::custom(e.to_string()))
        }
    }

    ///Supported set of sort modes for scanning by name or id
    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum NameOrIdSortMode {
        #[serde(rename = "name_ascending")]
        NameAscending,
        #[serde(rename = "name_descending")]
        NameDescending,
        #[serde(rename = "id_ascending")]
        IdAscending,
    }

    impl ToString for NameOrIdSortMode {
        fn to_string(&self) -> String {
            match *self {
                Self::NameAscending => "name_ascending".to_string(),
                Self::NameDescending => "name_descending".to_string(),
                Self::IdAscending => "id_ascending".to_string(),
            }
        }
    }

    impl std::str::FromStr for NameOrIdSortMode {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "name_ascending" => Ok(Self::NameAscending),
                "name_descending" => Ok(Self::NameDescending),
                "id_ascending" => Ok(Self::IdAscending),
                _ => Err("invalid value"),
            }
        }
    }

    ///Supported set of sort modes for scanning by name only
    ///
    ///Currently, we only support scanning in ascending order.
    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum NameSortMode {
        #[serde(rename = "name_ascending")]
        NameAscending,
    }

    impl ToString for NameSortMode {
        fn to_string(&self) -> String {
            match *self {
                Self::NameAscending => "name_ascending".to_string(),
            }
        }
    }

    impl std::str::FromStr for NameSortMode {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "name_ascending" => Ok(Self::NameAscending),
                _ => Err("invalid value"),
            }
        }
    }

    ///A `NetworkInterface` represents a virtual network interface device.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct NetworkInterface {
        ///human-readable free-form text about a resource
        pub description: String,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///The Instance to which the interface belongs.
        pub instance_id: uuid::Uuid,
        ///The IP address assigned to this interface.
        pub ip: std::net::IpAddr,
        ///The MAC address assigned to this interface.
        pub mac: MacAddr,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        ///True if this interface is the primary for the instance to which it's
        /// attached.
        pub primary: bool,
        ///The subnet to which the interface belongs.
        pub subnet_id: uuid::Uuid,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
        ///The VPC to which the interface belongs.
        pub vpc_id: uuid::Uuid,
    }

    ///Create-time parameters for a
    /// [`NetworkInterface`](omicron_common::api::external::NetworkInterface)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct NetworkInterfaceCreate {
        pub description: String,
        ///The IP address for the interface. One will be auto-assigned if not
        /// provided.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub ip: Option<std::net::IpAddr>,
        pub name: Name,
        ///The VPC Subnet in which to create the interface.
        pub subnet_name: Name,
        ///The VPC in which to create the interface.
        pub vpc_name: Name,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct NetworkInterfaceResultsPage {
        ///list of items on this page of results
        pub items: Vec<NetworkInterface>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///Parameters for updating a
    /// [`NetworkInterface`](omicron_common::api::external::NetworkInterface).
    ///
    ///Note that modifying IP addresses for an interface is not yet supported,
    /// a new interface must be created instead.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct NetworkInterfaceUpdate {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
        ///Make a secondary interface the instance's primary interface.
        ///
        ///If applied to a secondary interface, that interface will become the
        /// primary on the next reboot of the instance. Note that this may have
        /// implications for routing between instances, as the new primary
        /// interface will be on a distinct subnet from the previous primary
        /// interface.
        ///
        ///Note that this can only be used to select a new primary interface
        /// for an instance. Requests to change the primary interface into a
        /// secondary will return an error.
        #[serde(default)]
        pub make_primary: bool,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub name: Option<Name>,
    }

    ///Client view of an [`Organization`]
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct Organization {
        ///human-readable free-form text about a resource
        pub description: String,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    ///Create-time parameters for an
    /// [`Organization`](crate::external_api::views::Organization)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct OrganizationCreate {
        pub description: String,
        pub name: Name,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct OrganizationResultsPage {
        ///list of items on this page of results
        pub items: Vec<Organization>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum OrganizationRole {
        #[serde(rename = "admin")]
        Admin,
        #[serde(rename = "collaborator")]
        Collaborator,
        #[serde(rename = "viewer")]
        Viewer,
    }

    impl ToString for OrganizationRole {
        fn to_string(&self) -> String {
            match *self {
                Self::Admin => "admin".to_string(),
                Self::Collaborator => "collaborator".to_string(),
                Self::Viewer => "viewer".to_string(),
            }
        }
    }

    impl std::str::FromStr for OrganizationRole {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "admin" => Ok(Self::Admin),
                "collaborator" => Ok(Self::Collaborator),
                "viewer" => Ok(Self::Viewer),
                _ => Err("invalid value"),
            }
        }
    }

    ///Client view of a [`Policy`], which describes how this resource may be
    /// accessed
    ///
    ///Note that the Policy only describes access granted explicitly for this
    /// resource.  The policies of parent resources can also cause a user to
    /// have access to this resource.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct OrganizationRolePolicy {
        ///Roles directly assigned on this resource
        pub role_assignments: Vec<OrganizationRoleRoleAssignment>,
    }

    ///Describes the assignment of a particular role on a particular resource
    /// to a particular identity (user, group, etc.)
    ///
    ///The resource is not part of this structure.  Rather, [`RoleAssignment`]s
    /// are put into a [`Policy`] and that Policy is applied to a particular
    /// resource.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct OrganizationRoleRoleAssignment {
        pub identity_id: uuid::Uuid,
        pub identity_type: IdentityType,
        pub role_name: OrganizationRole,
    }

    ///Updateable properties of an
    /// [`Organization`](crate::external_api::views::Organization)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct OrganizationUpdate {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub name: Option<Name>,
    }

    ///Client view of a [`Project`]
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct Project {
        ///human-readable free-form text about a resource
        pub description: String,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        pub organization_id: uuid::Uuid,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    ///Create-time parameters for a
    /// [`Project`](crate::external_api::views::Project)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct ProjectCreate {
        pub description: String,
        pub name: Name,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct ProjectResultsPage {
        ///list of items on this page of results
        pub items: Vec<Project>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum ProjectRole {
        #[serde(rename = "admin")]
        Admin,
        #[serde(rename = "collaborator")]
        Collaborator,
        #[serde(rename = "viewer")]
        Viewer,
    }

    impl ToString for ProjectRole {
        fn to_string(&self) -> String {
            match *self {
                Self::Admin => "admin".to_string(),
                Self::Collaborator => "collaborator".to_string(),
                Self::Viewer => "viewer".to_string(),
            }
        }
    }

    impl std::str::FromStr for ProjectRole {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "admin" => Ok(Self::Admin),
                "collaborator" => Ok(Self::Collaborator),
                "viewer" => Ok(Self::Viewer),
                _ => Err("invalid value"),
            }
        }
    }

    ///Client view of a [`Policy`], which describes how this resource may be
    /// accessed
    ///
    ///Note that the Policy only describes access granted explicitly for this
    /// resource.  The policies of parent resources can also cause a user to
    /// have access to this resource.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct ProjectRolePolicy {
        ///Roles directly assigned on this resource
        pub role_assignments: Vec<ProjectRoleRoleAssignment>,
    }

    ///Describes the assignment of a particular role on a particular resource
    /// to a particular identity (user, group, etc.)
    ///
    ///The resource is not part of this structure.  Rather, [`RoleAssignment`]s
    /// are put into a [`Policy`] and that Policy is applied to a particular
    /// resource.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct ProjectRoleRoleAssignment {
        pub identity_id: uuid::Uuid,
        pub identity_type: IdentityType,
        pub role_name: ProjectRole,
    }

    ///Updateable properties of a
    /// [`Project`](crate::external_api::views::Project)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct ProjectUpdate {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub name: Option<Name>,
    }

    ///Client view of an [`Rack`]
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct Rack {
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct RackResultsPage {
        ///list of items on this page of results
        pub items: Vec<Rack>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///Client view of a [`Role`]
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct Role {
        pub description: String,
        pub name: RoleName,
    }

    ///Role names consist of two string components separated by dot (".").
    #[derive(Clone, Debug, Serialize, JsonSchema)]
    pub struct RoleName(String);
    impl std::ops::Deref for RoleName {
        type Target = String;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    impl std::convert::TryFrom<&str> for RoleName {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, Self::Error> {
            if value.len() > 63usize {
                return Err("longer than 63 characters");
            }
            if regress::Regex::new("[a-z-]+\\.[a-z-]+")
                .unwrap()
                .find(value)
                .is_none()
            {
                return Err("doesn't match pattern \"[a-z-]+\\.[a-z-]+\"");
            }
            Ok(Self(value.to_string()))
        }
    }

    impl std::convert::TryFrom<String> for RoleName {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, Self::Error> {
            Self::try_from(value.as_str())
        }
    }

    impl<'de> serde::Deserialize<'de> for RoleName {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            Self::try_from(String::deserialize(deserializer)?)
                .map_err(|e| <D::Error as serde::de::Error>::custom(e.to_string()))
        }
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct RoleResultsPage {
        ///list of items on this page of results
        pub items: Vec<Role>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///A `RouteDestination` is used to match traffic with a routing rule, on
    /// the destination of that traffic.
    ///
    ///When traffic is to be sent to a destination that is within a given
    /// `RouteDestination`, the corresponding [`RouterRoute`] applies, and
    /// traffic will be forward to the [`RouteTarget`] for that rule.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    #[serde(tag = "type", content = "value")]
    pub enum RouteDestination {
        ///Route applies to traffic destined for a specific IP address
        #[serde(rename = "ip")]
        Ip(std::net::IpAddr),
        ///Route applies to traffic destined for a specific IP subnet
        #[serde(rename = "ip_net")]
        IpNet(IpNet),
        ///Route applies to traffic destined for the given VPC.
        #[serde(rename = "vpc")]
        Vpc(Name),
        ///Route applies to traffic
        #[serde(rename = "subnet")]
        Subnet(Name),
    }

    ///A `RouteTarget` describes the possible locations that traffic matching a
    /// route destination can be sent.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    #[serde(tag = "type", content = "value")]
    pub enum RouteTarget {
        ///Forward traffic to a particular IP address.
        #[serde(rename = "ip")]
        Ip(std::net::IpAddr),
        ///Forward traffic to a VPC
        #[serde(rename = "vpc")]
        Vpc(Name),
        ///Forward traffic to a VPC Subnet
        #[serde(rename = "subnet")]
        Subnet(Name),
        ///Forward traffic to a specific instance
        #[serde(rename = "instance")]
        Instance(Name),
        ///Forward traffic to an internet gateway
        #[serde(rename = "internet_gateway")]
        InternetGateway(Name),
    }

    ///A route defines a rule that governs where traffic should be sent based
    /// on its destination.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct RouterRoute {
        ///human-readable free-form text about a resource
        pub description: String,
        pub destination: RouteDestination,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///Describes the kind of router. Set at creation. `read-only`
        pub kind: RouterRouteKind,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        pub target: RouteTarget,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
        ///The VPC Router to which the route belongs.
        pub vpc_router_id: uuid::Uuid,
    }

    ///Create-time parameters for a [`RouterRoute`]
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct RouterRouteCreateParams {
        pub description: String,
        pub destination: RouteDestination,
        pub name: Name,
        pub target: RouteTarget,
    }

    ///The classification of a [`RouterRoute`] as defined by the system. The
    /// kind determines certain attributes such as if the route is modifiable
    /// and describes how or where the route was created.
    ///
    ///See [RFD-21](https://rfd.shared.oxide.computer/rfd/0021#concept-router) for more context
    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum RouterRouteKind {
        #[serde(rename = "default")]
        Default,
        #[serde(rename = "vpc_subnet")]
        VpcSubnet,
        #[serde(rename = "vpc_peering")]
        VpcPeering,
        #[serde(rename = "custom")]
        Custom,
    }

    impl ToString for RouterRouteKind {
        fn to_string(&self) -> String {
            match *self {
                Self::Default => "default".to_string(),
                Self::VpcSubnet => "vpc_subnet".to_string(),
                Self::VpcPeering => "vpc_peering".to_string(),
                Self::Custom => "custom".to_string(),
            }
        }
    }

    impl std::str::FromStr for RouterRouteKind {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "default" => Ok(Self::Default),
                "vpc_subnet" => Ok(Self::VpcSubnet),
                "vpc_peering" => Ok(Self::VpcPeering),
                "custom" => Ok(Self::Custom),
                _ => Err("invalid value"),
            }
        }
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct RouterRouteResultsPage {
        ///list of items on this page of results
        pub items: Vec<RouterRoute>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///Updateable properties of a [`RouterRoute`]
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct RouterRouteUpdateParams {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
        pub destination: RouteDestination,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub name: Option<Name>,
        pub target: RouteTarget,
    }

    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct Saga {
        pub id: uuid::Uuid,
        pub state: SagaState,
    }

    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    #[serde(tag = "error")]
    pub enum SagaErrorInfo {
        #[serde(rename = "action_failed")]
        ActionFailed { source_error: serde_json::Value },
        #[serde(rename = "deserialize_failed")]
        DeserializeFailed { message: String },
        #[serde(rename = "injected_error")]
        InjectedError,
        #[serde(rename = "serialize_failed")]
        SerializeFailed { message: String },
        #[serde(rename = "subsaga_create_failed")]
        SubsagaCreateFailed { message: String },
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct SagaResultsPage {
        ///list of items on this page of results
        pub items: Vec<Saga>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    #[serde(tag = "state")]
    pub enum SagaState {
        #[serde(rename = "running")]
        Running,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed {
            error_info: SagaErrorInfo,
            error_node_name: String,
        },
    }

    ///Identity-related metadata that's included in nearly all public API
    /// objects
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct SamlIdentityProvider {
        ///service provider endpoint where the response will be sent
        pub acs_url: String,
        ///human-readable free-form text about a resource
        pub description: String,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///idp's entity id
        pub idp_entity_id: String,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        ///optional request signing public certificate (base64 encoded der
        /// file)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub public_cert: Option<String>,
        ///service provider endpoint where the idp should send log out requests
        pub slo_url: String,
        ///sp's client id
        pub sp_client_id: String,
        ///customer's technical contact for saml configuration
        pub technical_contact_email: String,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    ///Create-time identity-related parameters
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct SamlIdentityProviderCreate {
        ///service provider endpoint where the response will be sent
        pub acs_url: String,
        pub description: String,
        ///idp's entity id
        pub idp_entity_id: String,
        ///the source of an identity provider metadata descriptor
        pub idp_metadata_source: IdpMetadataSource,
        pub name: Name,
        ///optional request signing key pair
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub signing_keypair: Option<DerEncodedKeyPair>,
        ///service provider endpoint where the idp should send log out requests
        pub slo_url: String,
        ///sp's client id
        pub sp_client_id: String,
        ///customer's technical contact for saml configuration
        pub technical_contact_email: String,
    }

    ///Client view of a ['Silo']
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct Silo {
        ///human-readable free-form text about a resource
        pub description: String,
        ///A silo where discoverable is false can be retrieved only by its id -
        /// it will not be part of the "list all silos" output.
        pub discoverable: bool,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
        ///User provision type
        pub user_provision_type: UserProvisionType,
    }

    ///Create-time parameters for a [`Silo`](crate::external_api::views::Silo)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct SiloCreate {
        pub description: String,
        pub discoverable: bool,
        pub name: Name,
        pub user_provision_type: UserProvisionType,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct SiloResultsPage {
        ///list of items on this page of results
        pub items: Vec<Silo>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum SiloRole {
        #[serde(rename = "admin")]
        Admin,
        #[serde(rename = "collaborator")]
        Collaborator,
        #[serde(rename = "viewer")]
        Viewer,
    }

    impl ToString for SiloRole {
        fn to_string(&self) -> String {
            match *self {
                Self::Admin => "admin".to_string(),
                Self::Collaborator => "collaborator".to_string(),
                Self::Viewer => "viewer".to_string(),
            }
        }
    }

    impl std::str::FromStr for SiloRole {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "admin" => Ok(Self::Admin),
                "collaborator" => Ok(Self::Collaborator),
                "viewer" => Ok(Self::Viewer),
                _ => Err("invalid value"),
            }
        }
    }

    ///Client view of a [`Policy`], which describes how this resource may be
    /// accessed
    ///
    ///Note that the Policy only describes access granted explicitly for this
    /// resource.  The policies of parent resources can also cause a user to
    /// have access to this resource.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct SiloRolePolicy {
        ///Roles directly assigned on this resource
        pub role_assignments: Vec<SiloRoleRoleAssignment>,
    }

    ///Describes the assignment of a particular role on a particular resource
    /// to a particular identity (user, group, etc.)
    ///
    ///The resource is not part of this structure.  Rather, [`RoleAssignment`]s
    /// are put into a [`Policy`] and that Policy is applied to a particular
    /// resource.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct SiloRoleRoleAssignment {
        pub identity_id: uuid::Uuid,
        pub identity_type: IdentityType,
        pub role_name: SiloRole,
    }

    ///Client view of an [`Sled`]
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct Sled {
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        pub service_address: String,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct SledResultsPage {
        ///list of items on this page of results
        pub items: Vec<Sled>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///Client view of a Snapshot
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct Snapshot {
        ///human-readable free-form text about a resource
        pub description: String,
        pub disk_id: uuid::Uuid,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        pub project_id: uuid::Uuid,
        pub size: ByteCount,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    ///Create-time parameters for a
    /// [`Snapshot`](omicron_common::api::external::Snapshot)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct SnapshotCreate {
        pub description: String,
        ///The name of the disk to be snapshotted
        pub disk: Name,
        pub name: Name,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct SnapshotResultsPage {
        ///list of items on this page of results
        pub items: Vec<Snapshot>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct SpoofLoginBody {
        pub username: String,
    }

    ///Client view of a [`SshKey`]
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct SshKey {
        ///human-readable free-form text about a resource
        pub description: String,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        ///SSH public key, e.g., `"ssh-ed25519 AAAAC3NzaC..."`
        pub public_key: String,
        ///The user to whom this key belongs
        pub silo_user_id: uuid::Uuid,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    ///Create-time parameters for an
    /// [`SshKey`](crate::external_api::views::SshKey)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct SshKeyCreate {
        pub description: String,
        pub name: Name,
        ///SSH public key, e.g., `"ssh-ed25519 AAAAC3NzaC..."`
        pub public_key: String,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct SshKeyResultsPage {
        ///list of items on this page of results
        pub items: Vec<SshKey>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///Names are constructed by concatenating the target and metric names with
    /// ':'. Target and metric names must be lowercase alphanumeric characters
    /// with '_' separating words.
    #[derive(Clone, Debug, Serialize, JsonSchema)]
    pub struct TimeseriesName(String);
    impl std::ops::Deref for TimeseriesName {
        type Target = String;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }

    impl std::convert::TryFrom<&str> for TimeseriesName {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, Self::Error> {
            if regress::Regex::new(
                "(([a-z]+[a-z0-9]*)(_([a-z0-9]+))*):(([a-z]+[a-z0-9]*)(_([a-z0-9]+))*)",
            )
            .unwrap()
            .find(value)
            .is_none()
            {
                return Err ("doesn't match pattern \"(([a-z]+[a-z0-9]*)(_([a-z0-9]+))*):(([a-z]+[a-z0-9]*)(_([a-z0-9]+))*)\"") ;
            }
            Ok(Self(value.to_string()))
        }
    }

    impl std::convert::TryFrom<String> for TimeseriesName {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, Self::Error> {
            Self::try_from(value.as_str())
        }
    }

    impl<'de> serde::Deserialize<'de> for TimeseriesName {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            Self::try_from(String::deserialize(deserializer)?)
                .map_err(|e| <D::Error as serde::de::Error>::custom(e.to_string()))
        }
    }

    ///The schema for a timeseries.
    ///
    ///This includes the name of the timeseries, as well as the datum type of
    /// its metric and the schema for each field.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct TimeseriesSchema {
        pub created: chrono::DateTime<chrono::offset::Utc>,
        pub datum_type: DatumType,
        pub field_schema: Vec<FieldSchema>,
        pub timeseries_name: TimeseriesName,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct TimeseriesSchemaResultsPage {
        ///list of items on this page of results
        pub items: Vec<TimeseriesSchema>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///Client view of a [`User`]
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct User {
        ///Human-readable name that can identify the user
        pub display_name: String,
        pub id: uuid::Uuid,
    }

    ///Client view of a [`UserBuiltin`]
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct UserBuiltin {
        ///human-readable free-form text about a resource
        pub description: String,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct UserBuiltinResultsPage {
        ///list of items on this page of results
        pub items: Vec<UserBuiltin>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///How users will be provisioned in a silo during authentication.
    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum UserProvisionType {
        #[serde(rename = "fixed")]
        Fixed,
        #[serde(rename = "jit")]
        Jit,
    }

    impl ToString for UserProvisionType {
        fn to_string(&self) -> String {
            match *self {
                Self::Fixed => "fixed".to_string(),
                Self::Jit => "jit".to_string(),
            }
        }
    }

    impl std::str::FromStr for UserProvisionType {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "fixed" => Ok(Self::Fixed),
                "jit" => Ok(Self::Jit),
                _ => Err("invalid value"),
            }
        }
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct UserResultsPage {
        ///list of items on this page of results
        pub items: Vec<User>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///Client view of a [`Vpc`]
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct Vpc {
        ///human-readable free-form text about a resource
        pub description: String,
        ///The name used for the VPC in DNS.
        pub dns_name: Name,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///The unique local IPv6 address range for subnets in this VPC
        pub ipv6_prefix: Ipv6Net,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        ///id for the project containing this VPC
        pub project_id: uuid::Uuid,
        ///id for the system router where subnet default routes are registered
        pub system_router_id: uuid::Uuid,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    ///Create-time parameters for a [`Vpc`](crate::external_api::views::Vpc)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct VpcCreate {
        pub description: String,
        pub dns_name: Name,
        ///The IPv6 prefix for this VPC.
        ///
        ///All IPv6 subnets created from this VPC must be taken from this
        /// range, which sould be a Unique Local Address in the range
        /// `fd00::/48`. The default VPC Subnet will have the first `/64` range
        /// from this prefix.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub ipv6_prefix: Option<Ipv6Net>,
        pub name: Name,
    }

    ///A single rule in a VPC firewall
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct VpcFirewallRule {
        ///whether traffic matching the rule should be allowed or dropped
        pub action: VpcFirewallRuleAction,
        ///human-readable free-form text about a resource
        pub description: String,
        ///whether this rule is for incoming or outgoing traffic
        pub direction: VpcFirewallRuleDirection,
        ///reductions on the scope of the rule
        pub filters: VpcFirewallRuleFilter,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        ///the relative priority of this rule
        pub priority: u16,
        ///whether this rule is in effect
        pub status: VpcFirewallRuleStatus,
        ///list of sets of instances that the rule applies to
        pub targets: Vec<VpcFirewallRuleTarget>,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
        ///the VPC to which this rule belongs
        pub vpc_id: uuid::Uuid,
    }

    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum VpcFirewallRuleAction {
        #[serde(rename = "allow")]
        Allow,
        #[serde(rename = "deny")]
        Deny,
    }

    impl ToString for VpcFirewallRuleAction {
        fn to_string(&self) -> String {
            match *self {
                Self::Allow => "allow".to_string(),
                Self::Deny => "deny".to_string(),
            }
        }
    }

    impl std::str::FromStr for VpcFirewallRuleAction {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "allow" => Ok(Self::Allow),
                "deny" => Ok(Self::Deny),
                _ => Err("invalid value"),
            }
        }
    }

    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum VpcFirewallRuleDirection {
        #[serde(rename = "inbound")]
        Inbound,
        #[serde(rename = "outbound")]
        Outbound,
    }

    impl ToString for VpcFirewallRuleDirection {
        fn to_string(&self) -> String {
            match *self {
                Self::Inbound => "inbound".to_string(),
                Self::Outbound => "outbound".to_string(),
            }
        }
    }

    impl std::str::FromStr for VpcFirewallRuleDirection {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "inbound" => Ok(Self::Inbound),
                "outbound" => Ok(Self::Outbound),
                _ => Err("invalid value"),
            }
        }
    }

    ///Filter for a firewall rule. A given packet must match every field that
    /// is present for the rule to apply to it. A packet matches a field if any
    /// entry in that field matches the packet.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct VpcFirewallRuleFilter {
        ///If present, the sources (if incoming) or destinations (if outgoing)
        /// this rule applies to.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub hosts: Option<Vec<VpcFirewallRuleHostFilter>>,
        ///If present, the destination ports this rule applies to.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub ports: Option<Vec<L4PortRange>>,
        ///If present, the networking protocols this rule applies to.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub protocols: Option<Vec<VpcFirewallRuleProtocol>>,
    }

    ///The `VpcFirewallRuleHostFilter` is used to filter traffic on the basis
    /// of its source or destination host.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    #[serde(tag = "type", content = "value")]
    pub enum VpcFirewallRuleHostFilter {
        ///The rule applies to traffic from/to all instances in the VPC
        #[serde(rename = "vpc")]
        Vpc(Name),
        ///The rule applies to traffic from/to all instances in the VPC Subnet
        #[serde(rename = "subnet")]
        Subnet(Name),
        ///The rule applies to traffic from/to this specific instance
        #[serde(rename = "instance")]
        Instance(Name),
        ///The rule applies to traffic from/to a specific IP address
        #[serde(rename = "ip")]
        Ip(std::net::IpAddr),
        ///The rule applies to traffic from/to a specific IP subnet
        #[serde(rename = "ip_net")]
        IpNet(IpNet),
    }

    ///The protocols that may be specified in a firewall rule's filter
    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum VpcFirewallRuleProtocol {
        #[serde(rename = "TCP")]
        Tcp,
        #[serde(rename = "UDP")]
        Udp,
        #[serde(rename = "ICMP")]
        Icmp,
    }

    impl ToString for VpcFirewallRuleProtocol {
        fn to_string(&self) -> String {
            match *self {
                Self::Tcp => "TCP".to_string(),
                Self::Udp => "UDP".to_string(),
                Self::Icmp => "ICMP".to_string(),
            }
        }
    }

    impl std::str::FromStr for VpcFirewallRuleProtocol {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "TCP" => Ok(Self::Tcp),
                "UDP" => Ok(Self::Udp),
                "ICMP" => Ok(Self::Icmp),
                _ => Err("invalid value"),
            }
        }
    }

    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum VpcFirewallRuleStatus {
        #[serde(rename = "disabled")]
        Disabled,
        #[serde(rename = "enabled")]
        Enabled,
    }

    impl ToString for VpcFirewallRuleStatus {
        fn to_string(&self) -> String {
            match *self {
                Self::Disabled => "disabled".to_string(),
                Self::Enabled => "enabled".to_string(),
            }
        }
    }

    impl std::str::FromStr for VpcFirewallRuleStatus {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "disabled" => Ok(Self::Disabled),
                "enabled" => Ok(Self::Enabled),
                _ => Err("invalid value"),
            }
        }
    }

    ///A `VpcFirewallRuleTarget` is used to specify the set of [`Instance`]s to
    /// which a firewall rule applies.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    #[serde(tag = "type", content = "value")]
    pub enum VpcFirewallRuleTarget {
        ///The rule applies to all instances in the VPC
        #[serde(rename = "vpc")]
        Vpc(Name),
        ///The rule applies to all instances in the VPC Subnet
        #[serde(rename = "subnet")]
        Subnet(Name),
        ///The rule applies to this specific instance
        #[serde(rename = "instance")]
        Instance(Name),
        ///The rule applies to a specific IP address
        #[serde(rename = "ip")]
        Ip(std::net::IpAddr),
        ///The rule applies to a specific IP subnet
        #[serde(rename = "ip_net")]
        IpNet(IpNet),
    }

    ///A single rule in a VPC firewall
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct VpcFirewallRuleUpdate {
        ///whether traffic matching the rule should be allowed or dropped
        pub action: VpcFirewallRuleAction,
        ///human-readable free-form text about a resource
        pub description: String,
        ///whether this rule is for incoming or outgoing traffic
        pub direction: VpcFirewallRuleDirection,
        ///reductions on the scope of the rule
        pub filters: VpcFirewallRuleFilter,
        ///name of the rule, unique to this VPC
        pub name: Name,
        ///the relative priority of this rule
        pub priority: u16,
        ///whether this rule is in effect
        pub status: VpcFirewallRuleStatus,
        ///list of sets of instances that the rule applies to
        pub targets: Vec<VpcFirewallRuleTarget>,
    }

    ///Updateable properties of a `Vpc`'s firewall Note that VpcFirewallRules
    /// are implicitly created along with a Vpc, so there is no explicit
    /// creation.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct VpcFirewallRuleUpdateParams {
        pub rules: Vec<VpcFirewallRuleUpdate>,
    }

    ///Collection of a [`Vpc`]'s firewall rules
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct VpcFirewallRules {
        pub rules: Vec<VpcFirewallRule>,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct VpcResultsPage {
        ///list of items on this page of results
        pub items: Vec<Vpc>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///A VPC router defines a series of rules that indicate where traffic
    /// should be sent depending on its destination.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct VpcRouter {
        ///human-readable free-form text about a resource
        pub description: String,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        pub kind: VpcRouterKind,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
        ///The VPC to which the router belongs.
        pub vpc_id: uuid::Uuid,
    }

    ///Create-time parameters for a
    /// [`VpcRouter`](crate::external_api::views::VpcRouter)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct VpcRouterCreate {
        pub description: String,
        pub name: Name,
    }

    #[derive(
        Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, JsonSchema,
    )]
    pub enum VpcRouterKind {
        #[serde(rename = "system")]
        System,
        #[serde(rename = "custom")]
        Custom,
    }

    impl ToString for VpcRouterKind {
        fn to_string(&self) -> String {
            match *self {
                Self::System => "system".to_string(),
                Self::Custom => "custom".to_string(),
            }
        }
    }

    impl std::str::FromStr for VpcRouterKind {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            match value {
                "system" => Ok(Self::System),
                "custom" => Ok(Self::Custom),
                _ => Err("invalid value"),
            }
        }
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct VpcRouterResultsPage {
        ///list of items on this page of results
        pub items: Vec<VpcRouter>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///Updateable properties of a
    /// [`VpcRouter`](crate::external_api::views::VpcRouter)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct VpcRouterUpdate {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub name: Option<Name>,
    }

    ///A VPC subnet represents a logical grouping for instances that allows
    /// network traffic between them, within a IPv4 subnetwork or optionall an
    /// IPv6 subnetwork.
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct VpcSubnet {
        ///human-readable free-form text about a resource
        pub description: String,
        ///unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        ///The IPv4 subnet CIDR block.
        pub ipv4_block: Ipv4Net,
        ///The IPv6 subnet CIDR block.
        pub ipv6_block: Ipv6Net,
        ///unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        ///timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        ///timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
        ///The VPC to which the subnet belongs.
        pub vpc_id: uuid::Uuid,
    }

    ///Create-time parameters for a
    /// [`VpcSubnet`](crate::external_api::views::VpcSubnet)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct VpcSubnetCreate {
        pub description: String,
        ///The IPv4 address range for this subnet.
        ///
        ///It must be allocated from an RFC 1918 private address range, and
        /// must not overlap with any other existing subnet in the VPC.
        pub ipv4_block: Ipv4Net,
        ///The IPv6 address range for this subnet.
        ///
        ///It must be allocated from the RFC 4193 Unique Local Address range,
        /// with the prefix equal to the parent VPC's prefix. A random `/64`
        /// block will be assigned if one is not provided. It must not overlap
        /// with any existing subnet in the VPC.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub ipv6_block: Option<Ipv6Net>,
        pub name: Name,
    }

    ///A single page of results
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct VpcSubnetResultsPage {
        ///list of items on this page of results
        pub items: Vec<VpcSubnet>,
        ///token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    ///Updateable properties of a
    /// [`VpcSubnet`](crate::external_api::views::VpcSubnet)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct VpcSubnetUpdate {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub name: Option<Name>,
    }

    ///Updateable properties of a [`Vpc`](crate::external_api::views::Vpc)
    #[derive(Clone, Debug, Deserialize, Serialize, JsonSchema)]
    pub struct VpcUpdate {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub dns_name: Option<Name>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub name: Option<Name>,
    }
}

#[derive(Clone)]
pub struct Client {
    pub(crate) baseurl: String,
    pub(crate) client: reqwest::Client,
}

impl Client {
    pub fn new(baseurl: &str) -> Self {
        let dur = std::time::Duration::from_secs(15);
        let client = reqwest::ClientBuilder::new()
            .connect_timeout(dur)
            .timeout(dur)
            .build()
            .unwrap();
        Self::new_with_client(baseurl, client)
    }

    pub fn new_with_client(baseurl: &str, client: reqwest::Client) -> Self {
        Self {
            baseurl: baseurl.to_string(),
            client,
        }
    }

    pub fn baseurl(&self) -> &String {
        &self.baseurl
    }

    pub fn client(&self) -> &reqwest::Client {
        &self.client
    }
}

impl Client {
    ///Get a disk by id
    ///
    ///Sends a `GET` request to `/by-id/disks/{id}`
    ///```ignore
    /// let response = client.disk_view_by_id()
    ///    .id(id)
    ///    .send()
    ///    .await;
    /// ```
    pub fn disk_view_by_id(&self) -> builder::DiskViewById {
        builder::DiskViewById::new(self)
    }

    ///Get a global image by id
    ///
    ///Sends a `GET` request to `/by-id/global-images/{id}`
    ///```ignore
    /// let response = client.image_global_view_by_id()
    ///    .id(id)
    ///    .send()
    ///    .await;
    /// ```
    pub fn image_global_view_by_id(&self) -> builder::ImageGlobalViewById {
        builder::ImageGlobalViewById::new(self)
    }

    ///Fetch an image by id
    ///
    ///Sends a `GET` request to `/by-id/images/{id}`
    ///```ignore
    /// let response = client.image_view_by_id()
    ///    .id(id)
    ///    .send()
    ///    .await;
    /// ```
    pub fn image_view_by_id(&self) -> builder::ImageViewById {
        builder::ImageViewById::new(self)
    }

    ///Get an instance by id
    ///
    ///Sends a `GET` request to `/by-id/instances/{id}`
    ///```ignore
    /// let response = client.instance_view_by_id()
    ///    .id(id)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_view_by_id(&self) -> builder::InstanceViewById {
        builder::InstanceViewById::new(self)
    }

    ///Get an instance's network interface by id
    ///
    ///Sends a `GET` request to `/by-id/network-interfaces/{id}`
    ///```ignore
    /// let response = client.instance_network_interface_view_by_id()
    ///    .id(id)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_network_interface_view_by_id(
        &self,
    ) -> builder::InstanceNetworkInterfaceViewById {
        builder::InstanceNetworkInterfaceViewById::new(self)
    }

    ///Get an organization by id
    ///
    ///Sends a `GET` request to `/by-id/organizations/{id}`
    ///```ignore
    /// let response = client.organization_view_by_id()
    ///    .id(id)
    ///    .send()
    ///    .await;
    /// ```
    pub fn organization_view_by_id(&self) -> builder::OrganizationViewById {
        builder::OrganizationViewById::new(self)
    }

    ///Get a project by id
    ///
    ///Sends a `GET` request to `/by-id/projects/{id}`
    ///```ignore
    /// let response = client.project_view_by_id()
    ///    .id(id)
    ///    .send()
    ///    .await;
    /// ```
    pub fn project_view_by_id(&self) -> builder::ProjectViewById {
        builder::ProjectViewById::new(self)
    }

    ///Get a snapshot by id
    ///
    ///Sends a `GET` request to `/by-id/snapshots/{id}`
    ///```ignore
    /// let response = client.snapshot_view_by_id()
    ///    .id(id)
    ///    .send()
    ///    .await;
    /// ```
    pub fn snapshot_view_by_id(&self) -> builder::SnapshotViewById {
        builder::SnapshotViewById::new(self)
    }

    ///Get a vpc router route by id
    ///
    ///Sends a `GET` request to `/by-id/vpc-router-routes/{id}`
    ///```ignore
    /// let response = client.vpc_router_route_view_by_id()
    ///    .id(id)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_router_route_view_by_id(&self) -> builder::VpcRouterRouteViewById {
        builder::VpcRouterRouteViewById::new(self)
    }

    ///Get a VPC Router by id
    ///
    ///Sends a `GET` request to `/by-id/vpc-routers/{id}`
    ///```ignore
    /// let response = client.vpc_router_view_by_id()
    ///    .id(id)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_router_view_by_id(&self) -> builder::VpcRouterViewById {
        builder::VpcRouterViewById::new(self)
    }

    ///Get a VPC subnet by id
    ///
    ///Sends a `GET` request to `/by-id/vpc-subnets/{id}`
    ///```ignore
    /// let response = client.vpc_subnet_view_by_id()
    ///    .id(id)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_subnet_view_by_id(&self) -> builder::VpcSubnetViewById {
        builder::VpcSubnetViewById::new(self)
    }

    ///Get a VPC by id
    ///
    ///Sends a `GET` request to `/by-id/vpcs/{id}`
    ///```ignore
    /// let response = client.vpc_view_by_id()
    ///    .id(id)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_view_by_id(&self) -> builder::VpcViewById {
        builder::VpcViewById::new(self)
    }

    ///Start an OAuth 2.0 Device Authorization Grant
    ///
    ///This endpoint is designed to be accessed from an *unauthenticated* API
    /// client. It generates and records a `device_code` and `user_code` which
    /// must be verified and confirmed prior to a token being granted.
    ///
    ///Sends a `POST` request to `/device/auth`
    ///```ignore
    /// let response = client.device_auth_request()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn device_auth_request(&self) -> builder::DeviceAuthRequest {
        builder::DeviceAuthRequest::new(self)
    }

    ///Confirm an OAuth 2.0 Device Authorization Grant
    ///
    ///This endpoint is designed to be accessed by the user agent (browser),
    /// not the client requesting the token. So we do not actually return the
    /// token here; it will be returned in response to the poll on
    /// `/device/token`.
    ///
    ///Sends a `POST` request to `/device/confirm`
    ///```ignore
    /// let response = client.device_auth_confirm()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn device_auth_confirm(&self) -> builder::DeviceAuthConfirm {
        builder::DeviceAuthConfirm::new(self)
    }

    ///Request a device access token
    ///
    ///This endpoint should be polled by the client until the user code is
    /// verified and the grant is confirmed.
    ///
    ///Sends a `POST` request to `/device/token`
    ///```ignore
    /// let response = client.device_access_token()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn device_access_token(&self) -> builder::DeviceAccessToken {
        builder::DeviceAccessToken::new(self)
    }

    ///List racks in the system
    ///
    ///Sends a `GET` request to `/hardware/racks`
    ///
    ///Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.rack_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn rack_list(&self) -> builder::RackList {
        builder::RackList::new(self)
    }

    ///Fetch information about a particular rack
    ///
    ///Sends a `GET` request to `/hardware/racks/{rack_id}`
    ///
    ///Arguments:
    /// - `rack_id`: The rack's unique ID.
    ///
    ///```ignore
    /// let response = client.rack_view()
    ///    .rack_id(rack_id)
    ///    .send()
    ///    .await;
    /// ```
    pub fn rack_view(&self) -> builder::RackView {
        builder::RackView::new(self)
    }

    ///List sleds in the system
    ///
    ///Sends a `GET` request to `/hardware/sleds`
    ///
    ///Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.sled_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn sled_list(&self) -> builder::SledList {
        builder::SledList::new(self)
    }

    ///Fetch information about a sled in the system
    ///
    ///Sends a `GET` request to `/hardware/sleds/{sled_id}`
    ///
    ///Arguments:
    /// - `sled_id`: The sled's unique ID.
    ///
    ///```ignore
    /// let response = client.sled_view()
    ///    .sled_id(sled_id)
    ///    .send()
    ///    .await;
    /// ```
    pub fn sled_view(&self) -> builder::SledView {
        builder::SledView::new(self)
    }

    ///List global images
    ///
    ///Returns a list of all the global images. Global images are returned
    /// sorted by creation date, with the most recent images appearing first.
    ///
    ///Sends a `GET` request to `/images`
    ///
    ///Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.image_global_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn image_global_list(&self) -> builder::ImageGlobalList {
        builder::ImageGlobalList::new(self)
    }

    ///Create a global image
    ///
    ///Create a new global image. This image can then be used by any user as a
    /// base for instances.
    ///
    ///Sends a `POST` request to `/images`
    ///```ignore
    /// let response = client.image_global_create()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn image_global_create(&self) -> builder::ImageGlobalCreate {
        builder::ImageGlobalCreate::new(self)
    }

    ///Get a global image
    ///
    ///Returns the details of a specific global image.
    ///
    ///Sends a `GET` request to `/images/{image_name}`
    ///```ignore
    /// let response = client.image_global_view()
    ///    .image_name(image_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn image_global_view(&self) -> builder::ImageGlobalView {
        builder::ImageGlobalView::new(self)
    }

    ///Delete a global image
    ///
    ///Permanently delete a global image. This operation cannot be undone. Any
    /// instances using the global image will continue to run, however new
    /// instances can not be created with this image.
    ///
    ///Sends a `DELETE` request to `/images/{image_name}`
    ///```ignore
    /// let response = client.image_global_delete()
    ///    .image_name(image_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn image_global_delete(&self) -> builder::ImageGlobalDelete {
        builder::ImageGlobalDelete::new(self)
    }

    ///List IP Pools
    ///
    ///Sends a `GET` request to `/ip-pools`
    ///
    ///Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.ip_pool_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn ip_pool_list(&self) -> builder::IpPoolList {
        builder::IpPoolList::new(self)
    }

    ///Create a new IP Pool
    ///
    ///Sends a `POST` request to `/ip-pools`
    ///```ignore
    /// let response = client.ip_pool_create()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn ip_pool_create(&self) -> builder::IpPoolCreate {
        builder::IpPoolCreate::new(self)
    }

    ///Fetch a single IP Pool
    ///
    ///Sends a `GET` request to `/ip-pools/{pool_name}`
    ///```ignore
    /// let response = client.ip_pool_view()
    ///    .pool_name(pool_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn ip_pool_view(&self) -> builder::IpPoolView {
        builder::IpPoolView::new(self)
    }

    ///Update an IP Pool
    ///
    ///Sends a `PUT` request to `/ip-pools/{pool_name}`
    ///```ignore
    /// let response = client.ip_pool_update()
    ///    .pool_name(pool_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn ip_pool_update(&self) -> builder::IpPoolUpdate {
        builder::IpPoolUpdate::new(self)
    }

    ///Delete an IP Pool
    ///
    ///Sends a `DELETE` request to `/ip-pools/{pool_name}`
    ///```ignore
    /// let response = client.ip_pool_delete()
    ///    .pool_name(pool_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn ip_pool_delete(&self) -> builder::IpPoolDelete {
        builder::IpPoolDelete::new(self)
    }

    ///List the ranges of IP addresses within an existing IP Pool
    ///
    ///Note that ranges are listed sorted by their first address.
    ///
    ///Sends a `GET` request to `/ip-pools/{pool_name}/ranges`
    ///
    ///Arguments:
    /// - `pool_name`
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    ///
    ///```ignore
    /// let response = client.ip_pool_range_list()
    ///    .pool_name(pool_name)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .send()
    ///    .await;
    /// ```
    pub fn ip_pool_range_list(&self) -> builder::IpPoolRangeList {
        builder::IpPoolRangeList::new(self)
    }

    ///Add a new range to an existing IP Pool
    ///
    ///Sends a `POST` request to `/ip-pools/{pool_name}/ranges/add`
    ///```ignore
    /// let response = client.ip_pool_range_add()
    ///    .pool_name(pool_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn ip_pool_range_add(&self) -> builder::IpPoolRangeAdd {
        builder::IpPoolRangeAdd::new(self)
    }

    ///Remove a range from an existing IP Pool
    ///
    ///Sends a `POST` request to `/ip-pools/{pool_name}/ranges/remove`
    ///```ignore
    /// let response = client.ip_pool_range_remove()
    ///    .pool_name(pool_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn ip_pool_range_remove(&self) -> builder::IpPoolRangeRemove {
        builder::IpPoolRangeRemove::new(self)
    }

    ///Sends a `POST` request to `/login`
    ///```ignore
    /// let response = client.spoof_login()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn spoof_login(&self) -> builder::SpoofLogin {
        builder::SpoofLogin::new(self)
    }

    ///Ask the user to login to their identity provider
    ///
    ///Either display a page asking a user for their credentials, or redirect
    /// them to their identity provider.
    ///
    ///Sends a `GET` request to `/login/{silo_name}/{provider_name}`
    ///```ignore
    /// let response = client.login()
    ///    .silo_name(silo_name)
    ///    .provider_name(provider_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn login(&self) -> builder::Login {
        builder::Login::new(self)
    }

    ///Consume some sort of credentials, and authenticate a user
    ///
    ///Either receive a username and password, or some sort of identity
    /// provider data (like a SAMLResponse). Use these to set the user's session
    /// cookie.
    ///
    ///Sends a `POST` request to `/login/{silo_name}/{provider_name}`
    ///```ignore
    /// let response = client.consume_credentials()
    ///    .silo_name(silo_name)
    ///    .provider_name(provider_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn consume_credentials(&self) -> builder::ConsumeCredentials {
        builder::ConsumeCredentials::new(self)
    }

    ///Sends a `POST` request to `/logout`
    ///```ignore
    /// let response = client.logout()
    ///    .send()
    ///    .await;
    /// ```
    pub fn logout(&self) -> builder::Logout {
        builder::Logout::new(self)
    }

    ///List all organizations
    ///
    ///Sends a `GET` request to `/organizations`
    ///
    ///Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.organization_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn organization_list(&self) -> builder::OrganizationList {
        builder::OrganizationList::new(self)
    }

    ///Create a new organization
    ///
    ///Sends a `POST` request to `/organizations`
    ///```ignore
    /// let response = client.organization_create()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn organization_create(&self) -> builder::OrganizationCreate {
        builder::OrganizationCreate::new(self)
    }

    ///Fetch a specific organization
    ///
    ///Sends a `GET` request to `/organizations/{organization_name}`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    ///
    ///```ignore
    /// let response = client.organization_view()
    ///    .organization_name(organization_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn organization_view(&self) -> builder::OrganizationView {
        builder::OrganizationView::new(self)
    }

    ///Update a specific organization
    ///
    ///Sends a `PUT` request to `/organizations/{organization_name}`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `body`
    ///
    ///```ignore
    /// let response = client.organization_update()
    ///    .organization_name(organization_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn organization_update(&self) -> builder::OrganizationUpdate {
        builder::OrganizationUpdate::new(self)
    }

    ///Delete a specific organization
    ///
    ///Sends a `DELETE` request to `/organizations/{organization_name}`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    ///
    ///```ignore
    /// let response = client.organization_delete()
    ///    .organization_name(organization_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn organization_delete(&self) -> builder::OrganizationDelete {
        builder::OrganizationDelete::new(self)
    }

    ///Fetch the IAM policy for this Organization
    ///
    ///Sends a `GET` request to `/organizations/{organization_name}/policy`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    ///
    ///```ignore
    /// let response = client.organization_policy_view()
    ///    .organization_name(organization_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn organization_policy_view(&self) -> builder::OrganizationPolicyView {
        builder::OrganizationPolicyView::new(self)
    }

    ///Update the IAM policy for this Organization
    ///
    ///Sends a `PUT` request to `/organizations/{organization_name}/policy`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `body`
    ///
    ///```ignore
    /// let response = client.organization_policy_update()
    ///    .organization_name(organization_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn organization_policy_update(&self) -> builder::OrganizationPolicyUpdate {
        builder::OrganizationPolicyUpdate::new(self)
    }

    ///List all projects
    ///
    ///Sends a `GET` request to `/organizations/{organization_name}/projects`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.project_list()
    ///    .organization_name(organization_name)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn project_list(&self) -> builder::ProjectList {
        builder::ProjectList::new(self)
    }

    ///Create a new project
    ///
    ///Sends a `POST` request to `/organizations/{organization_name}/projects`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `body`
    ///
    ///```ignore
    /// let response = client.project_create()
    ///    .organization_name(organization_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn project_create(&self) -> builder::ProjectCreate {
        builder::ProjectCreate::new(self)
    }

    ///Fetch a specific project
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `project_name`: The project's unique name within the organization.
    ///
    ///```ignore
    /// let response = client.project_view()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn project_view(&self) -> builder::ProjectView {
        builder::ProjectView::new(self)
    }

    ///Update a specific project
    ///
    ///Sends a `PUT` request to
    /// `/organizations/{organization_name}/projects/{project_name}`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `project_name`: The project's unique name within the organization.
    /// - `body`
    ///
    ///```ignore
    /// let response = client.project_update()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn project_update(&self) -> builder::ProjectUpdate {
        builder::ProjectUpdate::new(self)
    }

    ///Delete a specific project
    ///
    ///Sends a `DELETE` request to
    /// `/organizations/{organization_name}/projects/{project_name}`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `project_name`: The project's unique name within the organization.
    ///
    ///```ignore
    /// let response = client.project_delete()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn project_delete(&self) -> builder::ProjectDelete {
        builder::ProjectDelete::new(self)
    }

    ///List disks in a project
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/disks`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `project_name`: The project's unique name within the organization.
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.disk_list()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn disk_list(&self) -> builder::DiskList {
        builder::DiskList::new(self)
    }

    ///Create a disk in a project
    ///
    ///Sends a `POST` request to
    /// `/organizations/{organization_name}/projects/{project_name}/disks`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `project_name`: The project's unique name within the organization.
    /// - `body`
    ///
    ///```ignore
    /// let response = client.disk_create()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn disk_create(&self) -> builder::DiskCreate {
        builder::DiskCreate::new(self)
    }

    ///Get a single disk in a project
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/disks/
    /// {disk_name}` ```ignore
    /// let response = client.disk_view()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .disk_name(disk_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn disk_view(&self) -> builder::DiskView {
        builder::DiskView::new(self)
    }

    ///Delete a disk from a project
    ///
    ///Sends a `DELETE` request to
    /// `/organizations/{organization_name}/projects/{project_name}/disks/
    /// {disk_name}` ```ignore
    /// let response = client.disk_delete()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .disk_name(disk_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn disk_delete(&self) -> builder::DiskDelete {
        builder::DiskDelete::new(self)
    }

    ///List images
    ///
    ///List images in a project. The images are returned sorted by creation
    /// date, with the most recent images appearing first.
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/images`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `project_name`: The project's unique name within the organization.
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.image_list()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn image_list(&self) -> builder::ImageList {
        builder::ImageList::new(self)
    }

    ///Create an image
    ///
    ///Create a new image in a project.
    ///
    ///Sends a `POST` request to
    /// `/organizations/{organization_name}/projects/{project_name}/images`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `project_name`: The project's unique name within the organization.
    /// - `body`
    ///
    ///```ignore
    /// let response = client.image_create()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn image_create(&self) -> builder::ImageCreate {
        builder::ImageCreate::new(self)
    }

    ///Get an image
    ///
    ///Get the details of a specific image in a project.
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/images/
    /// {image_name}` ```ignore
    /// let response = client.image_view()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .image_name(image_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn image_view(&self) -> builder::ImageView {
        builder::ImageView::new(self)
    }

    ///Delete an image
    ///
    ///Permanently delete an image from a project. This operation cannot be
    /// undone. Any instances in the project using the image will continue to
    /// run, however new instances can not be created with this image.
    ///
    ///Sends a `DELETE` request to
    /// `/organizations/{organization_name}/projects/{project_name}/images/
    /// {image_name}` ```ignore
    /// let response = client.image_delete()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .image_name(image_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn image_delete(&self) -> builder::ImageDelete {
        builder::ImageDelete::new(self)
    }

    ///List instances in a project
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/instances`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `project_name`: The project's unique name within the organization.
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.instance_list()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_list(&self) -> builder::InstanceList {
        builder::InstanceList::new(self)
    }

    ///Create an instance in a project
    ///
    ///Sends a `POST` request to
    /// `/organizations/{organization_name}/projects/{project_name}/instances`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `project_name`: The project's unique name within the organization.
    /// - `body`
    ///
    ///```ignore
    /// let response = client.instance_create()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_create(&self) -> builder::InstanceCreate {
        builder::InstanceCreate::new(self)
    }

    ///Get an instance in a project
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/instances/
    /// {instance_name}` ```ignore
    /// let response = client.instance_view()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .instance_name(instance_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_view(&self) -> builder::InstanceView {
        builder::InstanceView::new(self)
    }

    ///Delete an instance from a project
    ///
    ///Sends a `DELETE` request to
    /// `/organizations/{organization_name}/projects/{project_name}/instances/
    /// {instance_name}` ```ignore
    /// let response = client.instance_delete()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .instance_name(instance_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_delete(&self) -> builder::InstanceDelete {
        builder::InstanceDelete::new(self)
    }

    ///List disks attached to this instance
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/instances/
    /// {instance_name}/disks`
    ///
    ///Arguments:
    /// - `organization_name`
    /// - `project_name`
    /// - `instance_name`
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.instance_disk_list()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .instance_name(instance_name)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_disk_list(&self) -> builder::InstanceDiskList {
        builder::InstanceDiskList::new(self)
    }

    ///Sends a `POST` request to
    /// `/organizations/{organization_name}/projects/{project_name}/instances/
    /// {instance_name}/disks/attach` ```ignore
    /// let response = client.instance_disk_attach()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .instance_name(instance_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_disk_attach(&self) -> builder::InstanceDiskAttach {
        builder::InstanceDiskAttach::new(self)
    }

    ///Sends a `POST` request to
    /// `/organizations/{organization_name}/projects/{project_name}/instances/
    /// {instance_name}/disks/detach` ```ignore
    /// let response = client.instance_disk_detach()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .instance_name(instance_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_disk_detach(&self) -> builder::InstanceDiskDetach {
        builder::InstanceDiskDetach::new(self)
    }

    ///Migrate an instance to a different propolis-server, possibly on a
    /// different sled
    ///
    ///Sends a `POST` request to
    /// `/organizations/{organization_name}/projects/{project_name}/instances/
    /// {instance_name}/migrate` ```ignore
    /// let response = client.instance_migrate()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .instance_name(instance_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_migrate(&self) -> builder::InstanceMigrate {
        builder::InstanceMigrate::new(self)
    }

    ///List network interfaces attached to this instance
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/instances/
    /// {instance_name}/network-interfaces`
    ///
    ///Arguments:
    /// - `organization_name`
    /// - `project_name`
    /// - `instance_name`
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.instance_network_interface_list()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .instance_name(instance_name)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_network_interface_list(&self) -> builder::InstanceNetworkInterfaceList {
        builder::InstanceNetworkInterfaceList::new(self)
    }

    ///Create a network interface for an instance
    ///
    ///Sends a `POST` request to
    /// `/organizations/{organization_name}/projects/{project_name}/instances/
    /// {instance_name}/network-interfaces` ```ignore
    /// let response = client.instance_network_interface_create()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .instance_name(instance_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_network_interface_create(&self) -> builder::InstanceNetworkInterfaceCreate {
        builder::InstanceNetworkInterfaceCreate::new(self)
    }

    ///Get an interface attached to an instance
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/instances/
    /// {instance_name}/network-interfaces/{interface_name}` ```ignore
    /// let response = client.instance_network_interface_view()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .instance_name(instance_name)
    ///    .interface_name(interface_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_network_interface_view(&self) -> builder::InstanceNetworkInterfaceView {
        builder::InstanceNetworkInterfaceView::new(self)
    }

    ///Update information about an instance's network interface
    ///
    ///Sends a `PUT` request to
    /// `/organizations/{organization_name}/projects/{project_name}/instances/
    /// {instance_name}/network-interfaces/{interface_name}` ```ignore
    /// let response = client.instance_network_interface_update()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .instance_name(instance_name)
    ///    .interface_name(interface_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_network_interface_update(&self) -> builder::InstanceNetworkInterfaceUpdate {
        builder::InstanceNetworkInterfaceUpdate::new(self)
    }

    ///Detach a network interface from an instance
    ///
    ///Note that the primary interface for an instance cannot be deleted if
    /// there are any secondary interfaces. A new primary interface must be
    /// designated first. The primary interface can be deleted if there are no
    /// secondary interfaces.
    ///
    ///Sends a `DELETE` request to
    /// `/organizations/{organization_name}/projects/{project_name}/instances/
    /// {instance_name}/network-interfaces/{interface_name}` ```ignore
    /// let response = client.instance_network_interface_delete()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .instance_name(instance_name)
    ///    .interface_name(interface_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_network_interface_delete(&self) -> builder::InstanceNetworkInterfaceDelete {
        builder::InstanceNetworkInterfaceDelete::new(self)
    }

    ///Reboot an instance
    ///
    ///Sends a `POST` request to
    /// `/organizations/{organization_name}/projects/{project_name}/instances/
    /// {instance_name}/reboot` ```ignore
    /// let response = client.instance_reboot()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .instance_name(instance_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_reboot(&self) -> builder::InstanceReboot {
        builder::InstanceReboot::new(self)
    }

    ///Get contents of an instance's serial console
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/instances/
    /// {instance_name}/serial-console`
    ///
    ///Arguments:
    /// - `organization_name`
    /// - `project_name`
    /// - `instance_name`
    /// - `from_start`: Character index in the serial buffer from which to read,
    ///   counting the bytes output since instance start. If this is not
    ///   provided, `most_recent` must be provided, and if this *is* provided,
    ///   `most_recent` must *not* be provided.
    /// - `max_bytes`: Maximum number of bytes of buffered serial console
    ///   contents to return. If the requested range runs to the end of the
    ///   available buffer, the data returned will be shorter than `max_bytes`.
    /// - `most_recent`: Character index in the serial buffer from which to
    ///   read, counting *backward* from the most recently buffered data
    ///   retrieved from the instance. (See note on `from_start` about mutual
    ///   exclusivity)
    ///
    ///```ignore
    /// let response = client.instance_serial_console()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .instance_name(instance_name)
    ///    .from_start(from_start)
    ///    .max_bytes(max_bytes)
    ///    .most_recent(most_recent)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_serial_console(&self) -> builder::InstanceSerialConsole {
        builder::InstanceSerialConsole::new(self)
    }

    ///Boot an instance
    ///
    ///Sends a `POST` request to
    /// `/organizations/{organization_name}/projects/{project_name}/instances/
    /// {instance_name}/start` ```ignore
    /// let response = client.instance_start()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .instance_name(instance_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_start(&self) -> builder::InstanceStart {
        builder::InstanceStart::new(self)
    }

    ///Halt an instance
    ///
    ///Sends a `POST` request to
    /// `/organizations/{organization_name}/projects/{project_name}/instances/
    /// {instance_name}/stop` ```ignore
    /// let response = client.instance_stop()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .instance_name(instance_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn instance_stop(&self) -> builder::InstanceStop {
        builder::InstanceStop::new(self)
    }

    ///Fetch the IAM policy for this Project
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/policy`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `project_name`: The project's unique name within the organization.
    ///
    ///```ignore
    /// let response = client.project_policy_view()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn project_policy_view(&self) -> builder::ProjectPolicyView {
        builder::ProjectPolicyView::new(self)
    }

    ///Update the IAM policy for this Project
    ///
    ///Sends a `PUT` request to
    /// `/organizations/{organization_name}/projects/{project_name}/policy`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `project_name`: The project's unique name within the organization.
    /// - `body`
    ///
    ///```ignore
    /// let response = client.project_policy_update()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn project_policy_update(&self) -> builder::ProjectPolicyUpdate {
        builder::ProjectPolicyUpdate::new(self)
    }

    ///List snapshots in a project
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/snapshots`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `project_name`: The project's unique name within the organization.
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.snapshot_list()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn snapshot_list(&self) -> builder::SnapshotList {
        builder::SnapshotList::new(self)
    }

    ///Create a snapshot of a disk
    ///
    ///Sends a `POST` request to
    /// `/organizations/{organization_name}/projects/{project_name}/snapshots`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `project_name`: The project's unique name within the organization.
    /// - `body`
    ///
    ///```ignore
    /// let response = client.snapshot_create()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn snapshot_create(&self) -> builder::SnapshotCreate {
        builder::SnapshotCreate::new(self)
    }

    ///Get a snapshot in a project
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/snapshots/
    /// {snapshot_name}` ```ignore
    /// let response = client.snapshot_view()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .snapshot_name(snapshot_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn snapshot_view(&self) -> builder::SnapshotView {
        builder::SnapshotView::new(self)
    }

    ///Delete a snapshot from a project
    ///
    ///Sends a `DELETE` request to
    /// `/organizations/{organization_name}/projects/{project_name}/snapshots/
    /// {snapshot_name}` ```ignore
    /// let response = client.snapshot_delete()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .snapshot_name(snapshot_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn snapshot_delete(&self) -> builder::SnapshotDelete {
        builder::SnapshotDelete::new(self)
    }

    ///List VPCs in a project
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `project_name`: The project's unique name within the organization.
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.vpc_list()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_list(&self) -> builder::VpcList {
        builder::VpcList::new(self)
    }

    ///Create a VPC in a project
    ///
    ///Sends a `POST` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs`
    ///
    ///Arguments:
    /// - `organization_name`: The organization's unique name.
    /// - `project_name`: The project's unique name within the organization.
    /// - `body`
    ///
    ///```ignore
    /// let response = client.vpc_create()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_create(&self) -> builder::VpcCreate {
        builder::VpcCreate::new(self)
    }

    ///Get a VPC in a project
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}` ```ignore
    /// let response = client.vpc_view()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_view(&self) -> builder::VpcView {
        builder::VpcView::new(self)
    }

    ///Update a VPC
    ///
    ///Sends a `PUT` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}` ```ignore
    /// let response = client.vpc_update()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_update(&self) -> builder::VpcUpdate {
        builder::VpcUpdate::new(self)
    }

    ///Delete a vpc from a project
    ///
    ///Sends a `DELETE` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}` ```ignore
    /// let response = client.vpc_delete()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_delete(&self) -> builder::VpcDelete {
        builder::VpcDelete::new(self)
    }

    ///List firewall rules for a VPC
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/firewall/rules` ```ignore
    /// let response = client.vpc_firewall_rules_view()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_firewall_rules_view(&self) -> builder::VpcFirewallRulesView {
        builder::VpcFirewallRulesView::new(self)
    }

    ///Replace the firewall rules for a VPC
    ///
    ///Sends a `PUT` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/firewall/rules` ```ignore
    /// let response = client.vpc_firewall_rules_update()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_firewall_rules_update(&self) -> builder::VpcFirewallRulesUpdate {
        builder::VpcFirewallRulesUpdate::new(self)
    }

    ///List VPC Custom and System Routers
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/routers`
    ///
    ///Arguments:
    /// - `organization_name`
    /// - `project_name`
    /// - `vpc_name`
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.vpc_router_list()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_router_list(&self) -> builder::VpcRouterList {
        builder::VpcRouterList::new(self)
    }

    ///Create a VPC Router
    ///
    ///Sends a `POST` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/routers` ```ignore
    /// let response = client.vpc_router_create()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_router_create(&self) -> builder::VpcRouterCreate {
        builder::VpcRouterCreate::new(self)
    }

    ///Get a VPC Router
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/routers/{router_name}` ```ignore
    /// let response = client.vpc_router_view()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .router_name(router_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_router_view(&self) -> builder::VpcRouterView {
        builder::VpcRouterView::new(self)
    }

    ///Update a VPC Router
    ///
    ///Sends a `PUT` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/routers/{router_name}` ```ignore
    /// let response = client.vpc_router_update()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .router_name(router_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_router_update(&self) -> builder::VpcRouterUpdate {
        builder::VpcRouterUpdate::new(self)
    }

    ///Delete a router from its VPC
    ///
    ///Sends a `DELETE` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/routers/{router_name}` ```ignore
    /// let response = client.vpc_router_delete()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .router_name(router_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_router_delete(&self) -> builder::VpcRouterDelete {
        builder::VpcRouterDelete::new(self)
    }

    ///List a Router's routes
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/routers/{router_name}/routes`
    ///
    ///Arguments:
    /// - `organization_name`
    /// - `project_name`
    /// - `vpc_name`
    /// - `router_name`
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.vpc_router_route_list()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .router_name(router_name)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_router_route_list(&self) -> builder::VpcRouterRouteList {
        builder::VpcRouterRouteList::new(self)
    }

    ///Create a VPC Router
    ///
    ///Sends a `POST` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/routers/{router_name}/routes` ```ignore
    /// let response = client.vpc_router_route_create()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .router_name(router_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_router_route_create(&self) -> builder::VpcRouterRouteCreate {
        builder::VpcRouterRouteCreate::new(self)
    }

    ///Get a VPC Router route
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/routers/{router_name}/routes/{route_name}` ```ignore
    /// let response = client.vpc_router_route_view()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .router_name(router_name)
    ///    .route_name(route_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_router_route_view(&self) -> builder::VpcRouterRouteView {
        builder::VpcRouterRouteView::new(self)
    }

    ///Update a Router route
    ///
    ///Sends a `PUT` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/routers/{router_name}/routes/{route_name}` ```ignore
    /// let response = client.vpc_router_route_update()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .router_name(router_name)
    ///    .route_name(route_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_router_route_update(&self) -> builder::VpcRouterRouteUpdate {
        builder::VpcRouterRouteUpdate::new(self)
    }

    ///Delete a route from its router
    ///
    ///Sends a `DELETE` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/routers/{router_name}/routes/{route_name}` ```ignore
    /// let response = client.vpc_router_route_delete()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .router_name(router_name)
    ///    .route_name(route_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_router_route_delete(&self) -> builder::VpcRouterRouteDelete {
        builder::VpcRouterRouteDelete::new(self)
    }

    ///List subnets in a VPC
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/subnets`
    ///
    ///Arguments:
    /// - `organization_name`
    /// - `project_name`
    /// - `vpc_name`
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.vpc_subnet_list()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_subnet_list(&self) -> builder::VpcSubnetList {
        builder::VpcSubnetList::new(self)
    }

    ///Create a subnet in a VPC
    ///
    ///Sends a `POST` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/subnets` ```ignore
    /// let response = client.vpc_subnet_create()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_subnet_create(&self) -> builder::VpcSubnetCreate {
        builder::VpcSubnetCreate::new(self)
    }

    ///Get subnet in a VPC
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/subnets/{subnet_name}` ```ignore
    /// let response = client.vpc_subnet_view()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .subnet_name(subnet_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_subnet_view(&self) -> builder::VpcSubnetView {
        builder::VpcSubnetView::new(self)
    }

    ///Update a VPC Subnet
    ///
    ///Sends a `PUT` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/subnets/{subnet_name}` ```ignore
    /// let response = client.vpc_subnet_update()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .subnet_name(subnet_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_subnet_update(&self) -> builder::VpcSubnetUpdate {
        builder::VpcSubnetUpdate::new(self)
    }

    ///Delete a subnet from a VPC
    ///
    ///Sends a `DELETE` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/subnets/{subnet_name}` ```ignore
    /// let response = client.vpc_subnet_delete()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .subnet_name(subnet_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_subnet_delete(&self) -> builder::VpcSubnetDelete {
        builder::VpcSubnetDelete::new(self)
    }

    ///List network interfaces in a VPC subnet
    ///
    ///Sends a `GET` request to
    /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
    /// {vpc_name}/subnets/{subnet_name}/network-interfaces`
    ///
    ///Arguments:
    /// - `organization_name`
    /// - `project_name`
    /// - `vpc_name`
    /// - `subnet_name`
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.vpc_subnet_list_network_interfaces()
    ///    .organization_name(organization_name)
    ///    .project_name(project_name)
    ///    .vpc_name(vpc_name)
    ///    .subnet_name(subnet_name)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn vpc_subnet_list_network_interfaces(&self) -> builder::VpcSubnetListNetworkInterfaces {
        builder::VpcSubnetListNetworkInterfaces::new(self)
    }

    ///Fetch the top-level IAM policy
    ///
    ///Sends a `GET` request to `/policy`
    ///```ignore
    /// let response = client.policy_view()
    ///    .send()
    ///    .await;
    /// ```
    pub fn policy_view(&self) -> builder::PolicyView {
        builder::PolicyView::new(self)
    }

    ///Update the top-level IAM policy
    ///
    ///Sends a `PUT` request to `/policy`
    ///```ignore
    /// let response = client.policy_update()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn policy_update(&self) -> builder::PolicyUpdate {
        builder::PolicyUpdate::new(self)
    }

    ///List the built-in roles
    ///
    ///Sends a `GET` request to `/roles`
    ///
    ///Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    ///
    ///```ignore
    /// let response = client.role_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .send()
    ///    .await;
    /// ```
    pub fn role_list(&self) -> builder::RoleList {
        builder::RoleList::new(self)
    }

    ///Fetch a specific built-in role
    ///
    ///Sends a `GET` request to `/roles/{role_name}`
    ///
    ///Arguments:
    /// - `role_name`: The built-in role's unique name.
    ///
    ///```ignore
    /// let response = client.role_view()
    ///    .role_name(role_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn role_view(&self) -> builder::RoleView {
        builder::RoleView::new(self)
    }

    ///List all sagas (for debugging)
    ///
    ///Sends a `GET` request to `/sagas`
    ///
    ///Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.saga_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn saga_list(&self) -> builder::SagaList {
        builder::SagaList::new(self)
    }

    ///Fetch information about a single saga (for debugging)
    ///
    ///Sends a `GET` request to `/sagas/{saga_id}`
    ///```ignore
    /// let response = client.saga_view()
    ///    .saga_id(saga_id)
    ///    .send()
    ///    .await;
    /// ```
    pub fn saga_view(&self) -> builder::SagaView {
        builder::SagaView::new(self)
    }

    ///Fetch the user associated with the current session
    ///
    ///Sends a `GET` request to `/session/me`
    ///```ignore
    /// let response = client.session_me()
    ///    .send()
    ///    .await;
    /// ```
    pub fn session_me(&self) -> builder::SessionMe {
        builder::SessionMe::new(self)
    }

    ///List the current user's SSH public keys
    ///
    ///Sends a `GET` request to `/session/me/sshkeys`
    ///
    ///Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.session_sshkey_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn session_sshkey_list(&self) -> builder::SessionSshkeyList {
        builder::SessionSshkeyList::new(self)
    }

    ///Create a new SSH public key for the current user
    ///
    ///Sends a `POST` request to `/session/me/sshkeys`
    ///```ignore
    /// let response = client.session_sshkey_create()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn session_sshkey_create(&self) -> builder::SessionSshkeyCreate {
        builder::SessionSshkeyCreate::new(self)
    }

    ///Get (by name) an SSH public key belonging to the current user
    ///
    ///Sends a `GET` request to `/session/me/sshkeys/{ssh_key_name}`
    ///```ignore
    /// let response = client.session_sshkey_view()
    ///    .ssh_key_name(ssh_key_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn session_sshkey_view(&self) -> builder::SessionSshkeyView {
        builder::SessionSshkeyView::new(self)
    }

    ///Delete (by name) an SSH public key belonging to the current user
    ///
    ///Sends a `DELETE` request to `/session/me/sshkeys/{ssh_key_name}`
    ///```ignore
    /// let response = client.session_sshkey_delete()
    ///    .ssh_key_name(ssh_key_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn session_sshkey_delete(&self) -> builder::SessionSshkeyDelete {
        builder::SessionSshkeyDelete::new(self)
    }

    ///Sends a `GET` request to `/silos`
    ///
    ///Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.silo_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn silo_list(&self) -> builder::SiloList {
        builder::SiloList::new(self)
    }

    ///Create a new silo
    ///
    ///Sends a `POST` request to `/silos`
    ///```ignore
    /// let response = client.silo_create()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn silo_create(&self) -> builder::SiloCreate {
        builder::SiloCreate::new(self)
    }

    ///Fetch a specific silo
    ///
    ///Sends a `GET` request to `/silos/{silo_name}`
    ///
    ///Arguments:
    /// - `silo_name`: The silo's unique name.
    ///
    ///```ignore
    /// let response = client.silo_view()
    ///    .silo_name(silo_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn silo_view(&self) -> builder::SiloView {
        builder::SiloView::new(self)
    }

    ///Delete a specific silo
    ///
    ///Sends a `DELETE` request to `/silos/{silo_name}`
    ///
    ///Arguments:
    /// - `silo_name`: The silo's unique name.
    ///
    ///```ignore
    /// let response = client.silo_delete()
    ///    .silo_name(silo_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn silo_delete(&self) -> builder::SiloDelete {
        builder::SiloDelete::new(self)
    }

    ///List Silo identity providers
    ///
    ///Sends a `GET` request to `/silos/{silo_name}/identity-providers`
    ///
    ///Arguments:
    /// - `silo_name`: The silo's unique name.
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.silo_identity_provider_list()
    ///    .silo_name(silo_name)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn silo_identity_provider_list(&self) -> builder::SiloIdentityProviderList {
        builder::SiloIdentityProviderList::new(self)
    }

    ///Fetch the IAM policy for this Silo
    ///
    ///Sends a `GET` request to `/silos/{silo_name}/policy`
    ///
    ///Arguments:
    /// - `silo_name`: The silo's unique name.
    ///
    ///```ignore
    /// let response = client.silo_policy_view()
    ///    .silo_name(silo_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn silo_policy_view(&self) -> builder::SiloPolicyView {
        builder::SiloPolicyView::new(self)
    }

    ///Update the IAM policy for this Silo
    ///
    ///Sends a `PUT` request to `/silos/{silo_name}/policy`
    ///
    ///Arguments:
    /// - `silo_name`: The silo's unique name.
    /// - `body`
    ///
    ///```ignore
    /// let response = client.silo_policy_update()
    ///    .silo_name(silo_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn silo_policy_update(&self) -> builder::SiloPolicyUpdate {
        builder::SiloPolicyUpdate::new(self)
    }

    ///Create a new SAML identity provider for a silo
    ///
    ///Sends a `POST` request to `/silos/{silo_name}/saml-identity-providers`
    ///
    ///Arguments:
    /// - `silo_name`: The silo's unique name.
    /// - `body`
    ///
    ///```ignore
    /// let response = client.silo_identity_provider_create()
    ///    .silo_name(silo_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    pub fn silo_identity_provider_create(&self) -> builder::SiloIdentityProviderCreate {
        builder::SiloIdentityProviderCreate::new(self)
    }

    ///GET a silo's SAML identity provider
    ///
    ///Sends a `GET` request to
    /// `/silos/{silo_name}/saml-identity-providers/{provider_name}`
    ///
    ///Arguments:
    /// - `silo_name`: The silo's unique name.
    /// - `provider_name`: The SAML identity provider's name
    ///
    ///```ignore
    /// let response = client.silo_identity_provider_view()
    ///    .silo_name(silo_name)
    ///    .provider_name(provider_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn silo_identity_provider_view(&self) -> builder::SiloIdentityProviderView {
        builder::SiloIdentityProviderView::new(self)
    }

    ///List the built-in system users
    ///
    ///Sends a `GET` request to `/system/user`
    ///
    ///Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.system_user_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn system_user_list(&self) -> builder::SystemUserList {
        builder::SystemUserList::new(self)
    }

    ///Fetch a specific built-in system user
    ///
    ///Sends a `GET` request to `/system/user/{user_name}`
    ///
    ///Arguments:
    /// - `user_name`: The built-in user's unique name.
    ///
    ///```ignore
    /// let response = client.system_user_view()
    ///    .user_name(user_name)
    ///    .send()
    ///    .await;
    /// ```
    pub fn system_user_view(&self) -> builder::SystemUserView {
        builder::SystemUserView::new(self)
    }

    ///List all timeseries schema
    ///
    ///Sends a `GET` request to `/timeseries/schema`
    ///
    ///Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    ///
    ///```ignore
    /// let response = client.timeseries_schema_get()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .send()
    ///    .await;
    /// ```
    pub fn timeseries_schema_get(&self) -> builder::TimeseriesSchemaGet {
        builder::TimeseriesSchemaGet::new(self)
    }

    ///Refresh update metadata
    ///
    ///Sends a `POST` request to `/updates/refresh`
    ///```ignore
    /// let response = client.updates_refresh()
    ///    .send()
    ///    .await;
    /// ```
    pub fn updates_refresh(&self) -> builder::UpdatesRefresh {
        builder::UpdatesRefresh::new(self)
    }

    ///List users
    ///
    ///Sends a `GET` request to `/users`
    ///
    ///Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    ///
    ///```ignore
    /// let response = client.user_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    pub fn user_list(&self) -> builder::UserList {
        builder::UserList::new(self)
    }
}

pub mod builder {
    use super::types;
    #[allow(unused_imports)]
    use super::{encode_path, ByteStream, Error, RequestBuilderExt, ResponseValue};
    ///Builder for [`Client::disk_view_by_id`]
    ///
    ///[`Client::disk_view_by_id`]: super::Client::disk_view_by_id
    #[derive(Clone)]
    pub struct DiskViewById<'a> {
        client: &'a super::Client,
        id: Option<uuid::Uuid>,
    }

    impl<'a> DiskViewById<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, id: None }
        }

        pub fn id(mut self, value: uuid::Uuid) -> Self {
            self.id = Some(value);
            self
        }

        ///Sends a `GET` request to `/by-id/disks/{id}`
        pub async fn send(self) -> Result<ResponseValue<types::Disk>, Error<types::Error>> {
            let Self { client, id } = self;
            let (id,) = match (id,) {
                (Some(id),) => (id,),
                (id,) => {
                    let mut missing = Vec::new();
                    if id.is_none() {
                        missing.push(stringify!(id));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/by-id/disks/{}",
                client.baseurl,
                encode_path(&id.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::image_global_view_by_id`]
    ///
    ///[`Client::image_global_view_by_id`]: super::Client::image_global_view_by_id
    #[derive(Clone)]
    pub struct ImageGlobalViewById<'a> {
        client: &'a super::Client,
        id: Option<uuid::Uuid>,
    }

    impl<'a> ImageGlobalViewById<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, id: None }
        }

        pub fn id(mut self, value: uuid::Uuid) -> Self {
            self.id = Some(value);
            self
        }

        ///Sends a `GET` request to `/by-id/global-images/{id}`
        pub async fn send(self) -> Result<ResponseValue<types::GlobalImage>, Error<types::Error>> {
            let Self { client, id } = self;
            let (id,) = match (id,) {
                (Some(id),) => (id,),
                (id,) => {
                    let mut missing = Vec::new();
                    if id.is_none() {
                        missing.push(stringify!(id));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/by-id/global-images/{}",
                client.baseurl,
                encode_path(&id.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::image_view_by_id`]
    ///
    ///[`Client::image_view_by_id`]: super::Client::image_view_by_id
    #[derive(Clone)]
    pub struct ImageViewById<'a> {
        client: &'a super::Client,
        id: Option<uuid::Uuid>,
    }

    impl<'a> ImageViewById<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, id: None }
        }

        pub fn id(mut self, value: uuid::Uuid) -> Self {
            self.id = Some(value);
            self
        }

        ///Sends a `GET` request to `/by-id/images/{id}`
        pub async fn send(self) -> Result<ResponseValue<types::Image>, Error<types::Error>> {
            let Self { client, id } = self;
            let (id,) = match (id,) {
                (Some(id),) => (id,),
                (id,) => {
                    let mut missing = Vec::new();
                    if id.is_none() {
                        missing.push(stringify!(id));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/by-id/images/{}",
                client.baseurl,
                encode_path(&id.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::instance_view_by_id`]
    ///
    ///[`Client::instance_view_by_id`]: super::Client::instance_view_by_id
    #[derive(Clone)]
    pub struct InstanceViewById<'a> {
        client: &'a super::Client,
        id: Option<uuid::Uuid>,
    }

    impl<'a> InstanceViewById<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, id: None }
        }

        pub fn id(mut self, value: uuid::Uuid) -> Self {
            self.id = Some(value);
            self
        }

        ///Sends a `GET` request to `/by-id/instances/{id}`
        pub async fn send(self) -> Result<ResponseValue<types::Instance>, Error<types::Error>> {
            let Self { client, id } = self;
            let (id,) = match (id,) {
                (Some(id),) => (id,),
                (id,) => {
                    let mut missing = Vec::new();
                    if id.is_none() {
                        missing.push(stringify!(id));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/by-id/instances/{}",
                client.baseurl,
                encode_path(&id.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::instance_network_interface_view_by_id`]
    ///
    ///[`Client::instance_network_interface_view_by_id`]: super::Client::instance_network_interface_view_by_id
    #[derive(Clone)]
    pub struct InstanceNetworkInterfaceViewById<'a> {
        client: &'a super::Client,
        id: Option<uuid::Uuid>,
    }

    impl<'a> InstanceNetworkInterfaceViewById<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, id: None }
        }

        pub fn id(mut self, value: uuid::Uuid) -> Self {
            self.id = Some(value);
            self
        }

        ///Sends a `GET` request to `/by-id/network-interfaces/{id}`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::NetworkInterface>, Error<types::Error>> {
            let Self { client, id } = self;
            let (id,) = match (id,) {
                (Some(id),) => (id,),
                (id,) => {
                    let mut missing = Vec::new();
                    if id.is_none() {
                        missing.push(stringify!(id));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/by-id/network-interfaces/{}",
                client.baseurl,
                encode_path(&id.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::organization_view_by_id`]
    ///
    ///[`Client::organization_view_by_id`]: super::Client::organization_view_by_id
    #[derive(Clone)]
    pub struct OrganizationViewById<'a> {
        client: &'a super::Client,
        id: Option<uuid::Uuid>,
    }

    impl<'a> OrganizationViewById<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, id: None }
        }

        pub fn id(mut self, value: uuid::Uuid) -> Self {
            self.id = Some(value);
            self
        }

        ///Sends a `GET` request to `/by-id/organizations/{id}`
        pub async fn send(self) -> Result<ResponseValue<types::Organization>, Error<types::Error>> {
            let Self { client, id } = self;
            let (id,) = match (id,) {
                (Some(id),) => (id,),
                (id,) => {
                    let mut missing = Vec::new();
                    if id.is_none() {
                        missing.push(stringify!(id));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/by-id/organizations/{}",
                client.baseurl,
                encode_path(&id.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::project_view_by_id`]
    ///
    ///[`Client::project_view_by_id`]: super::Client::project_view_by_id
    #[derive(Clone)]
    pub struct ProjectViewById<'a> {
        client: &'a super::Client,
        id: Option<uuid::Uuid>,
    }

    impl<'a> ProjectViewById<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, id: None }
        }

        pub fn id(mut self, value: uuid::Uuid) -> Self {
            self.id = Some(value);
            self
        }

        ///Sends a `GET` request to `/by-id/projects/{id}`
        pub async fn send(self) -> Result<ResponseValue<types::Project>, Error<types::Error>> {
            let Self { client, id } = self;
            let (id,) = match (id,) {
                (Some(id),) => (id,),
                (id,) => {
                    let mut missing = Vec::new();
                    if id.is_none() {
                        missing.push(stringify!(id));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/by-id/projects/{}",
                client.baseurl,
                encode_path(&id.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::snapshot_view_by_id`]
    ///
    ///[`Client::snapshot_view_by_id`]: super::Client::snapshot_view_by_id
    #[derive(Clone)]
    pub struct SnapshotViewById<'a> {
        client: &'a super::Client,
        id: Option<uuid::Uuid>,
    }

    impl<'a> SnapshotViewById<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, id: None }
        }

        pub fn id(mut self, value: uuid::Uuid) -> Self {
            self.id = Some(value);
            self
        }

        ///Sends a `GET` request to `/by-id/snapshots/{id}`
        pub async fn send(self) -> Result<ResponseValue<types::Snapshot>, Error<types::Error>> {
            let Self { client, id } = self;
            let (id,) = match (id,) {
                (Some(id),) => (id,),
                (id,) => {
                    let mut missing = Vec::new();
                    if id.is_none() {
                        missing.push(stringify!(id));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/by-id/snapshots/{}",
                client.baseurl,
                encode_path(&id.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_router_route_view_by_id`]
    ///
    ///[`Client::vpc_router_route_view_by_id`]: super::Client::vpc_router_route_view_by_id
    #[derive(Clone)]
    pub struct VpcRouterRouteViewById<'a> {
        client: &'a super::Client,
        id: Option<uuid::Uuid>,
    }

    impl<'a> VpcRouterRouteViewById<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, id: None }
        }

        pub fn id(mut self, value: uuid::Uuid) -> Self {
            self.id = Some(value);
            self
        }

        ///Sends a `GET` request to `/by-id/vpc-router-routes/{id}`
        pub async fn send(self) -> Result<ResponseValue<types::RouterRoute>, Error<types::Error>> {
            let Self { client, id } = self;
            let (id,) = match (id,) {
                (Some(id),) => (id,),
                (id,) => {
                    let mut missing = Vec::new();
                    if id.is_none() {
                        missing.push(stringify!(id));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/by-id/vpc-router-routes/{}",
                client.baseurl,
                encode_path(&id.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_router_view_by_id`]
    ///
    ///[`Client::vpc_router_view_by_id`]: super::Client::vpc_router_view_by_id
    #[derive(Clone)]
    pub struct VpcRouterViewById<'a> {
        client: &'a super::Client,
        id: Option<uuid::Uuid>,
    }

    impl<'a> VpcRouterViewById<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, id: None }
        }

        pub fn id(mut self, value: uuid::Uuid) -> Self {
            self.id = Some(value);
            self
        }

        ///Sends a `GET` request to `/by-id/vpc-routers/{id}`
        pub async fn send(self) -> Result<ResponseValue<types::VpcRouter>, Error<types::Error>> {
            let Self { client, id } = self;
            let (id,) = match (id,) {
                (Some(id),) => (id,),
                (id,) => {
                    let mut missing = Vec::new();
                    if id.is_none() {
                        missing.push(stringify!(id));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/by-id/vpc-routers/{}",
                client.baseurl,
                encode_path(&id.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_subnet_view_by_id`]
    ///
    ///[`Client::vpc_subnet_view_by_id`]: super::Client::vpc_subnet_view_by_id
    #[derive(Clone)]
    pub struct VpcSubnetViewById<'a> {
        client: &'a super::Client,
        id: Option<uuid::Uuid>,
    }

    impl<'a> VpcSubnetViewById<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, id: None }
        }

        pub fn id(mut self, value: uuid::Uuid) -> Self {
            self.id = Some(value);
            self
        }

        ///Sends a `GET` request to `/by-id/vpc-subnets/{id}`
        pub async fn send(self) -> Result<ResponseValue<types::VpcSubnet>, Error<types::Error>> {
            let Self { client, id } = self;
            let (id,) = match (id,) {
                (Some(id),) => (id,),
                (id,) => {
                    let mut missing = Vec::new();
                    if id.is_none() {
                        missing.push(stringify!(id));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/by-id/vpc-subnets/{}",
                client.baseurl,
                encode_path(&id.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_view_by_id`]
    ///
    ///[`Client::vpc_view_by_id`]: super::Client::vpc_view_by_id
    #[derive(Clone)]
    pub struct VpcViewById<'a> {
        client: &'a super::Client,
        id: Option<uuid::Uuid>,
    }

    impl<'a> VpcViewById<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, id: None }
        }

        pub fn id(mut self, value: uuid::Uuid) -> Self {
            self.id = Some(value);
            self
        }

        ///Sends a `GET` request to `/by-id/vpcs/{id}`
        pub async fn send(self) -> Result<ResponseValue<types::Vpc>, Error<types::Error>> {
            let Self { client, id } = self;
            let (id,) = match (id,) {
                (Some(id),) => (id,),
                (id,) => {
                    let mut missing = Vec::new();
                    if id.is_none() {
                        missing.push(stringify!(id));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/by-id/vpcs/{}",
                client.baseurl,
                encode_path(&id.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::device_auth_request`]
    ///
    ///[`Client::device_auth_request`]: super::Client::device_auth_request
    #[derive(Clone)]
    pub struct DeviceAuthRequest<'a> {
        client: &'a super::Client,
        body: Option<types::DeviceAuthRequest>,
    }

    impl<'a> DeviceAuthRequest<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, body: None }
        }

        pub fn body(mut self, value: types::DeviceAuthRequest) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to `/device/auth`
        pub async fn send(self) -> Result<ResponseValue<ByteStream>, Error<ByteStream>> {
            let Self { client, body } = self;
            let (body,) = match (body,) {
                (Some(body),) => (body,),
                (body,) => {
                    let mut missing = Vec::new();
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!("{}/device/auth", client.baseurl,);
            let request = client.client.post(url).form_urlencoded(&body)?.build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200..=299 => Ok(ResponseValue::stream(response)),
                _ => Err(Error::ErrorResponse(ResponseValue::stream(response))),
            }
        }
    }

    ///Builder for [`Client::device_auth_confirm`]
    ///
    ///[`Client::device_auth_confirm`]: super::Client::device_auth_confirm
    #[derive(Clone)]
    pub struct DeviceAuthConfirm<'a> {
        client: &'a super::Client,
        body: Option<types::DeviceAuthVerify>,
    }

    impl<'a> DeviceAuthConfirm<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, body: None }
        }

        pub fn body(mut self, value: types::DeviceAuthVerify) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to `/device/confirm`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self { client, body } = self;
            let (body,) = match (body,) {
                (Some(body),) => (body,),
                (body,) => {
                    let mut missing = Vec::new();
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!("{}/device/confirm", client.baseurl,);
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::device_access_token`]
    ///
    ///[`Client::device_access_token`]: super::Client::device_access_token
    #[derive(Clone)]
    pub struct DeviceAccessToken<'a> {
        client: &'a super::Client,
        body: Option<types::DeviceAccessTokenRequest>,
    }

    impl<'a> DeviceAccessToken<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, body: None }
        }

        pub fn body(mut self, value: types::DeviceAccessTokenRequest) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to `/device/token`
        pub async fn send(self) -> Result<ResponseValue<ByteStream>, Error<ByteStream>> {
            let Self { client, body } = self;
            let (body,) = match (body,) {
                (Some(body),) => (body,),
                (body,) => {
                    let mut missing = Vec::new();
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!("{}/device/token", client.baseurl,);
            let request = client.client.post(url).form_urlencoded(&body)?.build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200..=299 => Ok(ResponseValue::stream(response)),
                _ => Err(Error::ErrorResponse(ResponseValue::stream(response))),
            }
        }
    }

    ///Builder for [`Client::rack_list`]
    ///
    ///[`Client::rack_list`]: super::Client::rack_list
    #[derive(Clone)]
    pub struct RackList<'a> {
        client: &'a super::Client,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::IdSortMode>,
    }

    impl<'a> RackList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::IdSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to `/hardware/racks`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::RackResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let url = format!("{}/hardware/racks", client.baseurl,);
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to `/hardware/racks`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Rack, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::rack_view`]
    ///
    ///[`Client::rack_view`]: super::Client::rack_view
    #[derive(Clone)]
    pub struct RackView<'a> {
        client: &'a super::Client,
        rack_id: Option<uuid::Uuid>,
    }

    impl<'a> RackView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                rack_id: None,
            }
        }

        pub fn rack_id(mut self, value: uuid::Uuid) -> Self {
            self.rack_id = Some(value);
            self
        }

        ///Sends a `GET` request to `/hardware/racks/{rack_id}`
        pub async fn send(self) -> Result<ResponseValue<types::Rack>, Error<types::Error>> {
            let Self { client, rack_id } = self;
            let (rack_id,) = match (rack_id,) {
                (Some(rack_id),) => (rack_id,),
                (rack_id,) => {
                    let mut missing = Vec::new();
                    if rack_id.is_none() {
                        missing.push(stringify!(rack_id));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/hardware/racks/{}",
                client.baseurl,
                encode_path(&rack_id.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::sled_list`]
    ///
    ///[`Client::sled_list`]: super::Client::sled_list
    #[derive(Clone)]
    pub struct SledList<'a> {
        client: &'a super::Client,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::IdSortMode>,
    }

    impl<'a> SledList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::IdSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to `/hardware/sleds`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SledResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let url = format!("{}/hardware/sleds", client.baseurl,);
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to `/hardware/sleds`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Sled, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::sled_view`]
    ///
    ///[`Client::sled_view`]: super::Client::sled_view
    #[derive(Clone)]
    pub struct SledView<'a> {
        client: &'a super::Client,
        sled_id: Option<uuid::Uuid>,
    }

    impl<'a> SledView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                sled_id: None,
            }
        }

        pub fn sled_id(mut self, value: uuid::Uuid) -> Self {
            self.sled_id = Some(value);
            self
        }

        ///Sends a `GET` request to `/hardware/sleds/{sled_id}`
        pub async fn send(self) -> Result<ResponseValue<types::Sled>, Error<types::Error>> {
            let Self { client, sled_id } = self;
            let (sled_id,) = match (sled_id,) {
                (Some(sled_id),) => (sled_id,),
                (sled_id,) => {
                    let mut missing = Vec::new();
                    if sled_id.is_none() {
                        missing.push(stringify!(sled_id));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/hardware/sleds/{}",
                client.baseurl,
                encode_path(&sled_id.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::image_global_list`]
    ///
    ///[`Client::image_global_list`]: super::Client::image_global_list
    #[derive(Clone)]
    pub struct ImageGlobalList<'a> {
        client: &'a super::Client,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameSortMode>,
    }

    impl<'a> ImageGlobalList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to `/images`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::GlobalImageResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let url = format!("{}/images", client.baseurl,);
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to `/images`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::GlobalImage, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::image_global_create`]
    ///
    ///[`Client::image_global_create`]: super::Client::image_global_create
    #[derive(Clone)]
    pub struct ImageGlobalCreate<'a> {
        client: &'a super::Client,
        body: Option<types::GlobalImageCreate>,
    }

    impl<'a> ImageGlobalCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, body: None }
        }

        pub fn body(mut self, value: types::GlobalImageCreate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to `/images`
        pub async fn send(self) -> Result<ResponseValue<types::GlobalImage>, Error<types::Error>> {
            let Self { client, body } = self;
            let (body,) = match (body,) {
                (Some(body),) => (body,),
                (body,) => {
                    let mut missing = Vec::new();
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!("{}/images", client.baseurl,);
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::image_global_view`]
    ///
    ///[`Client::image_global_view`]: super::Client::image_global_view
    #[derive(Clone)]
    pub struct ImageGlobalView<'a> {
        client: &'a super::Client,
        image_name: Option<types::Name>,
    }

    impl<'a> ImageGlobalView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                image_name: None,
            }
        }

        pub fn image_name(mut self, value: types::Name) -> Self {
            self.image_name = Some(value);
            self
        }

        ///Sends a `GET` request to `/images/{image_name}`
        pub async fn send(self) -> Result<ResponseValue<types::GlobalImage>, Error<types::Error>> {
            let Self { client, image_name } = self;
            let (image_name,) = match (image_name,) {
                (Some(image_name),) => (image_name,),
                (image_name,) => {
                    let mut missing = Vec::new();
                    if image_name.is_none() {
                        missing.push(stringify!(image_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/images/{}",
                client.baseurl,
                encode_path(&image_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::image_global_delete`]
    ///
    ///[`Client::image_global_delete`]: super::Client::image_global_delete
    #[derive(Clone)]
    pub struct ImageGlobalDelete<'a> {
        client: &'a super::Client,
        image_name: Option<types::Name>,
    }

    impl<'a> ImageGlobalDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                image_name: None,
            }
        }

        pub fn image_name(mut self, value: types::Name) -> Self {
            self.image_name = Some(value);
            self
        }

        ///Sends a `DELETE` request to `/images/{image_name}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self { client, image_name } = self;
            let (image_name,) = match (image_name,) {
                (Some(image_name),) => (image_name,),
                (image_name,) => {
                    let mut missing = Vec::new();
                    if image_name.is_none() {
                        missing.push(stringify!(image_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/images/{}",
                client.baseurl,
                encode_path(&image_name.to_string()),
            );
            let request = client.client.delete(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::ip_pool_list`]
    ///
    ///[`Client::ip_pool_list`]: super::Client::ip_pool_list
    #[derive(Clone)]
    pub struct IpPoolList<'a> {
        client: &'a super::Client,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameOrIdSortMode>,
    }

    impl<'a> IpPoolList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameOrIdSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to `/ip-pools`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::IpPoolResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let url = format!("{}/ip-pools", client.baseurl,);
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to `/ip-pools`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::IpPool, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::ip_pool_create`]
    ///
    ///[`Client::ip_pool_create`]: super::Client::ip_pool_create
    #[derive(Clone)]
    pub struct IpPoolCreate<'a> {
        client: &'a super::Client,
        body: Option<types::IpPoolCreate>,
    }

    impl<'a> IpPoolCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, body: None }
        }

        pub fn body(mut self, value: types::IpPoolCreate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to `/ip-pools`
        pub async fn send(self) -> Result<ResponseValue<types::IpPool>, Error<types::Error>> {
            let Self { client, body } = self;
            let (body,) = match (body,) {
                (Some(body),) => (body,),
                (body,) => {
                    let mut missing = Vec::new();
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!("{}/ip-pools", client.baseurl,);
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::ip_pool_view`]
    ///
    ///[`Client::ip_pool_view`]: super::Client::ip_pool_view
    #[derive(Clone)]
    pub struct IpPoolView<'a> {
        client: &'a super::Client,
        pool_name: Option<types::Name>,
    }

    impl<'a> IpPoolView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                pool_name: None,
            }
        }

        pub fn pool_name(mut self, value: types::Name) -> Self {
            self.pool_name = Some(value);
            self
        }

        ///Sends a `GET` request to `/ip-pools/{pool_name}`
        pub async fn send(self) -> Result<ResponseValue<types::IpPool>, Error<types::Error>> {
            let Self { client, pool_name } = self;
            let (pool_name,) = match (pool_name,) {
                (Some(pool_name),) => (pool_name,),
                (pool_name,) => {
                    let mut missing = Vec::new();
                    if pool_name.is_none() {
                        missing.push(stringify!(pool_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/ip-pools/{}",
                client.baseurl,
                encode_path(&pool_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::ip_pool_update`]
    ///
    ///[`Client::ip_pool_update`]: super::Client::ip_pool_update
    #[derive(Clone)]
    pub struct IpPoolUpdate<'a> {
        client: &'a super::Client,
        pool_name: Option<types::Name>,
        body: Option<types::IpPoolUpdate>,
    }

    impl<'a> IpPoolUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                pool_name: None,
                body: None,
            }
        }

        pub fn pool_name(mut self, value: types::Name) -> Self {
            self.pool_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::IpPoolUpdate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `PUT` request to `/ip-pools/{pool_name}`
        pub async fn send(self) -> Result<ResponseValue<types::IpPool>, Error<types::Error>> {
            let Self {
                client,
                pool_name,
                body,
            } = self;
            let (pool_name, body) = match (pool_name, body) {
                (Some(pool_name), Some(body)) => (pool_name, body),
                (pool_name, body) => {
                    let mut missing = Vec::new();
                    if pool_name.is_none() {
                        missing.push(stringify!(pool_name));
                    }
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/ip-pools/{}",
                client.baseurl,
                encode_path(&pool_name.to_string()),
            );
            let request = client.client.put(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::ip_pool_delete`]
    ///
    ///[`Client::ip_pool_delete`]: super::Client::ip_pool_delete
    #[derive(Clone)]
    pub struct IpPoolDelete<'a> {
        client: &'a super::Client,
        pool_name: Option<types::Name>,
    }

    impl<'a> IpPoolDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                pool_name: None,
            }
        }

        pub fn pool_name(mut self, value: types::Name) -> Self {
            self.pool_name = Some(value);
            self
        }

        ///Sends a `DELETE` request to `/ip-pools/{pool_name}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self { client, pool_name } = self;
            let (pool_name,) = match (pool_name,) {
                (Some(pool_name),) => (pool_name,),
                (pool_name,) => {
                    let mut missing = Vec::new();
                    if pool_name.is_none() {
                        missing.push(stringify!(pool_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/ip-pools/{}",
                client.baseurl,
                encode_path(&pool_name.to_string()),
            );
            let request = client.client.delete(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::ip_pool_range_list`]
    ///
    ///[`Client::ip_pool_range_list`]: super::Client::ip_pool_range_list
    #[derive(Clone)]
    pub struct IpPoolRangeList<'a> {
        client: &'a super::Client,
        pool_name: Option<types::Name>,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
    }

    impl<'a> IpPoolRangeList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                pool_name: None,
                limit: None,
                page_token: None,
            }
        }

        pub fn pool_name(mut self, value: types::Name) -> Self {
            self.pool_name = Some(value);
            self
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        ///Sends a `GET` request to `/ip-pools/{pool_name}/ranges`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::IpPoolRangeResultsPage>, Error<types::Error>> {
            let Self {
                client,
                pool_name,
                limit,
                page_token,
            } = self;
            let (pool_name,) = match (pool_name,) {
                (Some(pool_name),) => (pool_name,),
                (pool_name,) => {
                    let mut missing = Vec::new();
                    if pool_name.is_none() {
                        missing.push(stringify!(pool_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/ip-pools/{}/ranges",
                client.baseurl,
                encode_path(&pool_name.to_string()),
            );
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to `/ip-pools/{pool_name}/ranges`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::IpPoolRange, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::ip_pool_range_add`]
    ///
    ///[`Client::ip_pool_range_add`]: super::Client::ip_pool_range_add
    #[derive(Clone)]
    pub struct IpPoolRangeAdd<'a> {
        client: &'a super::Client,
        pool_name: Option<types::Name>,
        body: Option<types::IpRange>,
    }

    impl<'a> IpPoolRangeAdd<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                pool_name: None,
                body: None,
            }
        }

        pub fn pool_name(mut self, value: types::Name) -> Self {
            self.pool_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::IpRange) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to `/ip-pools/{pool_name}/ranges/add`
        pub async fn send(self) -> Result<ResponseValue<types::IpPoolRange>, Error<types::Error>> {
            let Self {
                client,
                pool_name,
                body,
            } = self;
            let (pool_name, body) = match (pool_name, body) {
                (Some(pool_name), Some(body)) => (pool_name, body),
                (pool_name, body) => {
                    let mut missing = Vec::new();
                    if pool_name.is_none() {
                        missing.push(stringify!(pool_name));
                    }
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/ip-pools/{}/ranges/add",
                client.baseurl,
                encode_path(&pool_name.to_string()),
            );
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::ip_pool_range_remove`]
    ///
    ///[`Client::ip_pool_range_remove`]: super::Client::ip_pool_range_remove
    #[derive(Clone)]
    pub struct IpPoolRangeRemove<'a> {
        client: &'a super::Client,
        pool_name: Option<types::Name>,
        body: Option<types::IpRange>,
    }

    impl<'a> IpPoolRangeRemove<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                pool_name: None,
                body: None,
            }
        }

        pub fn pool_name(mut self, value: types::Name) -> Self {
            self.pool_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::IpRange) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to `/ip-pools/{pool_name}/ranges/remove`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                pool_name,
                body,
            } = self;
            let (pool_name, body) = match (pool_name, body) {
                (Some(pool_name), Some(body)) => (pool_name, body),
                (pool_name, body) => {
                    let mut missing = Vec::new();
                    if pool_name.is_none() {
                        missing.push(stringify!(pool_name));
                    }
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/ip-pools/{}/ranges/remove",
                client.baseurl,
                encode_path(&pool_name.to_string()),
            );
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::spoof_login`]
    ///
    ///[`Client::spoof_login`]: super::Client::spoof_login
    #[derive(Clone)]
    pub struct SpoofLogin<'a> {
        client: &'a super::Client,
        body: Option<types::SpoofLoginBody>,
    }

    impl<'a> SpoofLogin<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, body: None }
        }

        pub fn body(mut self, value: types::SpoofLoginBody) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to `/login`
        pub async fn send(self) -> Result<ResponseValue<ByteStream>, Error<ByteStream>> {
            let Self { client, body } = self;
            let (body,) = match (body,) {
                (Some(body),) => (body,),
                (body,) => {
                    let mut missing = Vec::new();
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!("{}/login", client.baseurl,);
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200..=299 => Ok(ResponseValue::stream(response)),
                _ => Err(Error::ErrorResponse(ResponseValue::stream(response))),
            }
        }
    }

    ///Builder for [`Client::login`]
    ///
    ///[`Client::login`]: super::Client::login
    #[derive(Clone)]
    pub struct Login<'a> {
        client: &'a super::Client,
        silo_name: Option<types::Name>,
        provider_name: Option<types::Name>,
    }

    impl<'a> Login<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                silo_name: None,
                provider_name: None,
            }
        }

        pub fn silo_name(mut self, value: types::Name) -> Self {
            self.silo_name = Some(value);
            self
        }

        pub fn provider_name(mut self, value: types::Name) -> Self {
            self.provider_name = Some(value);
            self
        }

        ///Sends a `GET` request to `/login/{silo_name}/{provider_name}`
        pub async fn send(self) -> Result<ResponseValue<ByteStream>, Error<ByteStream>> {
            let Self {
                client,
                silo_name,
                provider_name,
            } = self;
            let (silo_name, provider_name) = match (silo_name, provider_name) {
                (Some(silo_name), Some(provider_name)) => (silo_name, provider_name),
                (silo_name, provider_name) => {
                    let mut missing = Vec::new();
                    if silo_name.is_none() {
                        missing.push(stringify!(silo_name));
                    }
                    if provider_name.is_none() {
                        missing.push(stringify!(provider_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/login/{}/{}",
                client.baseurl,
                encode_path(&silo_name.to_string()),
                encode_path(&provider_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200..=299 => Ok(ResponseValue::stream(response)),
                _ => Err(Error::ErrorResponse(ResponseValue::stream(response))),
            }
        }
    }

    ///Builder for [`Client::consume_credentials`]
    ///
    ///[`Client::consume_credentials`]: super::Client::consume_credentials
    pub struct ConsumeCredentials<'a> {
        client: &'a super::Client,
        silo_name: Option<types::Name>,
        provider_name: Option<types::Name>,
        body: Option<reqwest::Body>,
    }

    impl<'a> ConsumeCredentials<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                silo_name: None,
                provider_name: None,
                body: None,
            }
        }

        pub fn silo_name(mut self, value: types::Name) -> Self {
            self.silo_name = Some(value);
            self
        }

        pub fn provider_name(mut self, value: types::Name) -> Self {
            self.provider_name = Some(value);
            self
        }

        pub fn body<B: Into<reqwest::Body>>(mut self, value: B) -> Self {
            self.body = Some(value.into());
            self
        }

        ///Sends a `POST` request to `/login/{silo_name}/{provider_name}`
        pub async fn send(self) -> Result<ResponseValue<ByteStream>, Error<ByteStream>> {
            let Self {
                client,
                silo_name,
                provider_name,
                body,
            } = self;
            let (silo_name, provider_name, body) = match (silo_name, provider_name, body) {
                (Some(silo_name), Some(provider_name), Some(body)) => {
                    (silo_name, provider_name, body)
                }
                (silo_name, provider_name, body) => {
                    let mut missing = Vec::new();
                    if silo_name.is_none() {
                        missing.push(stringify!(silo_name));
                    }
                    if provider_name.is_none() {
                        missing.push(stringify!(provider_name));
                    }
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/login/{}/{}",
                client.baseurl,
                encode_path(&silo_name.to_string()),
                encode_path(&provider_name.to_string()),
            );
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::CONTENT_TYPE,
                    reqwest::header::HeaderValue::from_static("application/octet-stream"),
                )
                .body(body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200..=299 => Ok(ResponseValue::stream(response)),
                _ => Err(Error::ErrorResponse(ResponseValue::stream(response))),
            }
        }
    }

    ///Builder for [`Client::logout`]
    ///
    ///[`Client::logout`]: super::Client::logout
    #[derive(Clone)]
    pub struct Logout<'a> {
        client: &'a super::Client,
    }

    impl<'a> Logout<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client }
        }

        ///Sends a `POST` request to `/logout`
        pub async fn send(self) -> Result<ResponseValue<ByteStream>, Error<ByteStream>> {
            let Self { client } = self;
            let url = format!("{}/logout", client.baseurl,);
            let request = client.client.post(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200..=299 => Ok(ResponseValue::stream(response)),
                _ => Err(Error::ErrorResponse(ResponseValue::stream(response))),
            }
        }
    }

    ///Builder for [`Client::organization_list`]
    ///
    ///[`Client::organization_list`]: super::Client::organization_list
    #[derive(Clone)]
    pub struct OrganizationList<'a> {
        client: &'a super::Client,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameOrIdSortMode>,
    }

    impl<'a> OrganizationList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameOrIdSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to `/organizations`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::OrganizationResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let url = format!("{}/organizations", client.baseurl,);
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to `/organizations`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Organization, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::organization_create`]
    ///
    ///[`Client::organization_create`]: super::Client::organization_create
    #[derive(Clone)]
    pub struct OrganizationCreate<'a> {
        client: &'a super::Client,
        body: Option<types::OrganizationCreate>,
    }

    impl<'a> OrganizationCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, body: None }
        }

        pub fn body(mut self, value: types::OrganizationCreate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to `/organizations`
        pub async fn send(self) -> Result<ResponseValue<types::Organization>, Error<types::Error>> {
            let Self { client, body } = self;
            let (body,) = match (body,) {
                (Some(body),) => (body,),
                (body,) => {
                    let mut missing = Vec::new();
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!("{}/organizations", client.baseurl,);
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::organization_view`]
    ///
    ///[`Client::organization_view`]: super::Client::organization_view
    #[derive(Clone)]
    pub struct OrganizationView<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
    }

    impl<'a> OrganizationView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        ///Sends a `GET` request to `/organizations/{organization_name}`
        pub async fn send(self) -> Result<ResponseValue<types::Organization>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
            } = self;
            let (organization_name,) = match (organization_name,) {
                (Some(organization_name),) => (organization_name,),
                (organization_name,) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::organization_update`]
    ///
    ///[`Client::organization_update`]: super::Client::organization_update
    #[derive(Clone)]
    pub struct OrganizationUpdate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        body: Option<types::OrganizationUpdate>,
    }

    impl<'a> OrganizationUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::OrganizationUpdate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `PUT` request to `/organizations/{organization_name}`
        pub async fn send(self) -> Result<ResponseValue<types::Organization>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                body,
            } = self;
            let (organization_name, body) = match (organization_name, body) {
                (Some(organization_name), Some(body)) => (organization_name, body),
                (organization_name, body) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
            );
            let request = client.client.put(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::organization_delete`]
    ///
    ///[`Client::organization_delete`]: super::Client::organization_delete
    #[derive(Clone)]
    pub struct OrganizationDelete<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
    }

    impl<'a> OrganizationDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        ///Sends a `DELETE` request to `/organizations/{organization_name}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
            } = self;
            let (organization_name,) = match (organization_name,) {
                (Some(organization_name),) => (organization_name,),
                (organization_name,) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
            );
            let request = client.client.delete(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::organization_policy_view`]
    ///
    ///[`Client::organization_policy_view`]: super::Client::organization_policy_view
    #[derive(Clone)]
    pub struct OrganizationPolicyView<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
    }

    impl<'a> OrganizationPolicyView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        ///Sends a `GET` request to `/organizations/{organization_name}/policy`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::OrganizationRolePolicy>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
            } = self;
            let (organization_name,) = match (organization_name,) {
                (Some(organization_name),) => (organization_name,),
                (organization_name,) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/policy",
                client.baseurl,
                encode_path(&organization_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::organization_policy_update`]
    ///
    ///[`Client::organization_policy_update`]: super::Client::organization_policy_update
    #[derive(Clone)]
    pub struct OrganizationPolicyUpdate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        body: Option<types::OrganizationRolePolicy>,
    }

    impl<'a> OrganizationPolicyUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::OrganizationRolePolicy) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `PUT` request to `/organizations/{organization_name}/policy`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::OrganizationRolePolicy>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                body,
            } = self;
            let (organization_name, body) = match (organization_name, body) {
                (Some(organization_name), Some(body)) => (organization_name, body),
                (organization_name, body) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/policy",
                client.baseurl,
                encode_path(&organization_name.to_string()),
            );
            let request = client.client.put(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::project_list`]
    ///
    ///[`Client::project_list`]: super::Client::project_list
    #[derive(Clone)]
    pub struct ProjectList<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameOrIdSortMode>,
    }

    impl<'a> ProjectList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameOrIdSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::ProjectResultsPage>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                limit,
                page_token,
                sort_by,
            } = self;
            let (organization_name,) = match (organization_name,) {
                (Some(organization_name),) => (organization_name,),
                (organization_name,) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/projects",
                client.baseurl,
                encode_path(&organization_name.to_string()),
            );
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to
        /// `/organizations/{organization_name}/projects`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Project, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::project_create`]
    ///
    ///[`Client::project_create`]: super::Client::project_create
    #[derive(Clone)]
    pub struct ProjectCreate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        body: Option<types::ProjectCreate>,
    }

    impl<'a> ProjectCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::ProjectCreate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to
        /// `/organizations/{organization_name}/projects`
        pub async fn send(self) -> Result<ResponseValue<types::Project>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                body,
            } = self;
            let (organization_name, body) = match (organization_name, body) {
                (Some(organization_name), Some(body)) => (organization_name, body),
                (organization_name, body) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/projects",
                client.baseurl,
                encode_path(&organization_name.to_string()),
            );
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::project_view`]
    ///
    ///[`Client::project_view`]: super::Client::project_view
    #[derive(Clone)]
    pub struct ProjectView<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
    }

    impl<'a> ProjectView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}`
        pub async fn send(self) -> Result<ResponseValue<types::Project>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
            } = self;
            let (organization_name, project_name) = match (organization_name, project_name) {
                (Some(organization_name), Some(project_name)) => (organization_name, project_name),
                (organization_name, project_name) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    if project_name.is_none() {
                        missing.push(stringify!(project_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/projects/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::project_update`]
    ///
    ///[`Client::project_update`]: super::Client::project_update
    #[derive(Clone)]
    pub struct ProjectUpdate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        body: Option<types::ProjectUpdate>,
    }

    impl<'a> ProjectUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::ProjectUpdate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `PUT` request to
        /// `/organizations/{organization_name}/projects/{project_name}`
        pub async fn send(self) -> Result<ResponseValue<types::Project>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                body,
            } = self;
            let (organization_name, project_name, body) =
                match (organization_name, project_name, body) {
                    (Some(organization_name), Some(project_name), Some(body)) => {
                        (organization_name, project_name, body)
                    }
                    (organization_name, project_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
            );
            let request = client.client.put(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::project_delete`]
    ///
    ///[`Client::project_delete`]: super::Client::project_delete
    #[derive(Clone)]
    pub struct ProjectDelete<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
    }

    impl<'a> ProjectDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        ///Sends a `DELETE` request to
        /// `/organizations/{organization_name}/projects/{project_name}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
            } = self;
            let (organization_name, project_name) = match (organization_name, project_name) {
                (Some(organization_name), Some(project_name)) => (organization_name, project_name),
                (organization_name, project_name) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    if project_name.is_none() {
                        missing.push(stringify!(project_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/projects/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
            );
            let request = client.client.delete(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::disk_list`]
    ///
    ///[`Client::disk_list`]: super::Client::disk_list
    #[derive(Clone)]
    pub struct DiskList<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameSortMode>,
    }

    impl<'a> DiskList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/disks`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::DiskResultsPage>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                limit,
                page_token,
                sort_by,
            } = self;
            let (organization_name, project_name) = match (organization_name, project_name) {
                (Some(organization_name), Some(project_name)) => (organization_name, project_name),
                (organization_name, project_name) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    if project_name.is_none() {
                        missing.push(stringify!(project_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/projects/{}/disks",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
            );
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to
        /// `/organizations/{organization_name}/projects/{project_name}/disks`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Disk, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::disk_create`]
    ///
    ///[`Client::disk_create`]: super::Client::disk_create
    #[derive(Clone)]
    pub struct DiskCreate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        body: Option<types::DiskCreate>,
    }

    impl<'a> DiskCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::DiskCreate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to
        /// `/organizations/{organization_name}/projects/{project_name}/disks`
        pub async fn send(self) -> Result<ResponseValue<types::Disk>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                body,
            } = self;
            let (organization_name, project_name, body) =
                match (organization_name, project_name, body) {
                    (Some(organization_name), Some(project_name), Some(body)) => {
                        (organization_name, project_name, body)
                    }
                    (organization_name, project_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/disks",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
            );
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::disk_view`]
    ///
    ///[`Client::disk_view`]: super::Client::disk_view
    #[derive(Clone)]
    pub struct DiskView<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        disk_name: Option<types::Name>,
    }

    impl<'a> DiskView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                disk_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn disk_name(mut self, value: types::Name) -> Self {
            self.disk_name = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/disks/
        /// {disk_name}`
        pub async fn send(self) -> Result<ResponseValue<types::Disk>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                disk_name,
            } = self;
            let (organization_name, project_name, disk_name) =
                match (organization_name, project_name, disk_name) {
                    (Some(organization_name), Some(project_name), Some(disk_name)) => {
                        (organization_name, project_name, disk_name)
                    }
                    (organization_name, project_name, disk_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if disk_name.is_none() {
                            missing.push(stringify!(disk_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/disks/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&disk_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::disk_delete`]
    ///
    ///[`Client::disk_delete`]: super::Client::disk_delete
    #[derive(Clone)]
    pub struct DiskDelete<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        disk_name: Option<types::Name>,
    }

    impl<'a> DiskDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                disk_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn disk_name(mut self, value: types::Name) -> Self {
            self.disk_name = Some(value);
            self
        }

        ///Sends a `DELETE` request to
        /// `/organizations/{organization_name}/projects/{project_name}/disks/
        /// {disk_name}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                disk_name,
            } = self;
            let (organization_name, project_name, disk_name) =
                match (organization_name, project_name, disk_name) {
                    (Some(organization_name), Some(project_name), Some(disk_name)) => {
                        (organization_name, project_name, disk_name)
                    }
                    (organization_name, project_name, disk_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if disk_name.is_none() {
                            missing.push(stringify!(disk_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/disks/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&disk_name.to_string()),
            );
            let request = client.client.delete(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::image_list`]
    ///
    ///[`Client::image_list`]: super::Client::image_list
    #[derive(Clone)]
    pub struct ImageList<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameSortMode>,
    }

    impl<'a> ImageList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/images`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::ImageResultsPage>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                limit,
                page_token,
                sort_by,
            } = self;
            let (organization_name, project_name) = match (organization_name, project_name) {
                (Some(organization_name), Some(project_name)) => (organization_name, project_name),
                (organization_name, project_name) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    if project_name.is_none() {
                        missing.push(stringify!(project_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/projects/{}/images",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
            );
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to
        /// `/organizations/{organization_name}/projects/{project_name}/images`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Image, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::image_create`]
    ///
    ///[`Client::image_create`]: super::Client::image_create
    #[derive(Clone)]
    pub struct ImageCreate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        body: Option<types::ImageCreate>,
    }

    impl<'a> ImageCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::ImageCreate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to
        /// `/organizations/{organization_name}/projects/{project_name}/images`
        pub async fn send(self) -> Result<ResponseValue<types::Image>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                body,
            } = self;
            let (organization_name, project_name, body) =
                match (organization_name, project_name, body) {
                    (Some(organization_name), Some(project_name), Some(body)) => {
                        (organization_name, project_name, body)
                    }
                    (organization_name, project_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/images",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
            );
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::image_view`]
    ///
    ///[`Client::image_view`]: super::Client::image_view
    #[derive(Clone)]
    pub struct ImageView<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        image_name: Option<types::Name>,
    }

    impl<'a> ImageView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                image_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn image_name(mut self, value: types::Name) -> Self {
            self.image_name = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/images/
        /// {image_name}`
        pub async fn send(self) -> Result<ResponseValue<types::Image>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                image_name,
            } = self;
            let (organization_name, project_name, image_name) =
                match (organization_name, project_name, image_name) {
                    (Some(organization_name), Some(project_name), Some(image_name)) => {
                        (organization_name, project_name, image_name)
                    }
                    (organization_name, project_name, image_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if image_name.is_none() {
                            missing.push(stringify!(image_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/images/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&image_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::image_delete`]
    ///
    ///[`Client::image_delete`]: super::Client::image_delete
    #[derive(Clone)]
    pub struct ImageDelete<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        image_name: Option<types::Name>,
    }

    impl<'a> ImageDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                image_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn image_name(mut self, value: types::Name) -> Self {
            self.image_name = Some(value);
            self
        }

        ///Sends a `DELETE` request to
        /// `/organizations/{organization_name}/projects/{project_name}/images/
        /// {image_name}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                image_name,
            } = self;
            let (organization_name, project_name, image_name) =
                match (organization_name, project_name, image_name) {
                    (Some(organization_name), Some(project_name), Some(image_name)) => {
                        (organization_name, project_name, image_name)
                    }
                    (organization_name, project_name, image_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if image_name.is_none() {
                            missing.push(stringify!(image_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/images/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&image_name.to_string()),
            );
            let request = client.client.delete(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::instance_list`]
    ///
    ///[`Client::instance_list`]: super::Client::instance_list
    #[derive(Clone)]
    pub struct InstanceList<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameSortMode>,
    }

    impl<'a> InstanceList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::InstanceResultsPage>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                limit,
                page_token,
                sort_by,
            } = self;
            let (organization_name, project_name) = match (organization_name, project_name) {
                (Some(organization_name), Some(project_name)) => (organization_name, project_name),
                (organization_name, project_name) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    if project_name.is_none() {
                        missing.push(stringify!(project_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/projects/{}/instances",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
            );
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Instance, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::instance_create`]
    ///
    ///[`Client::instance_create`]: super::Client::instance_create
    #[derive(Clone)]
    pub struct InstanceCreate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        body: Option<types::InstanceCreate>,
    }

    impl<'a> InstanceCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::InstanceCreate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances`
        pub async fn send(self) -> Result<ResponseValue<types::Instance>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                body,
            } = self;
            let (organization_name, project_name, body) =
                match (organization_name, project_name, body) {
                    (Some(organization_name), Some(project_name), Some(body)) => {
                        (organization_name, project_name, body)
                    }
                    (organization_name, project_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/instances",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
            );
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::instance_view`]
    ///
    ///[`Client::instance_view`]: super::Client::instance_view
    #[derive(Clone)]
    pub struct InstanceView<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        instance_name: Option<types::Name>,
    }

    impl<'a> InstanceView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                instance_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn instance_name(mut self, value: types::Name) -> Self {
            self.instance_name = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances/{instance_name}`
        pub async fn send(self) -> Result<ResponseValue<types::Instance>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                instance_name,
            } = self;
            let (organization_name, project_name, instance_name) =
                match (organization_name, project_name, instance_name) {
                    (Some(organization_name), Some(project_name), Some(instance_name)) => {
                        (organization_name, project_name, instance_name)
                    }
                    (organization_name, project_name, instance_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if instance_name.is_none() {
                            missing.push(stringify!(instance_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/instances/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&instance_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::instance_delete`]
    ///
    ///[`Client::instance_delete`]: super::Client::instance_delete
    #[derive(Clone)]
    pub struct InstanceDelete<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        instance_name: Option<types::Name>,
    }

    impl<'a> InstanceDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                instance_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn instance_name(mut self, value: types::Name) -> Self {
            self.instance_name = Some(value);
            self
        }

        ///Sends a `DELETE` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances/{instance_name}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                instance_name,
            } = self;
            let (organization_name, project_name, instance_name) =
                match (organization_name, project_name, instance_name) {
                    (Some(organization_name), Some(project_name), Some(instance_name)) => {
                        (organization_name, project_name, instance_name)
                    }
                    (organization_name, project_name, instance_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if instance_name.is_none() {
                            missing.push(stringify!(instance_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/instances/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&instance_name.to_string()),
            );
            let request = client.client.delete(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::instance_disk_list`]
    ///
    ///[`Client::instance_disk_list`]: super::Client::instance_disk_list
    #[derive(Clone)]
    pub struct InstanceDiskList<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        instance_name: Option<types::Name>,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameSortMode>,
    }

    impl<'a> InstanceDiskList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                instance_name: None,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn instance_name(mut self, value: types::Name) -> Self {
            self.instance_name = Some(value);
            self
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances/{instance_name}/disks`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::DiskResultsPage>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                instance_name,
                limit,
                page_token,
                sort_by,
            } = self;
            let (organization_name, project_name, instance_name) =
                match (organization_name, project_name, instance_name) {
                    (Some(organization_name), Some(project_name), Some(instance_name)) => {
                        (organization_name, project_name, instance_name)
                    }
                    (organization_name, project_name, instance_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if instance_name.is_none() {
                            missing.push(stringify!(instance_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/instances/{}/disks",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&instance_name.to_string()),
            );
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances/{instance_name}/disks`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Disk, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::instance_disk_attach`]
    ///
    ///[`Client::instance_disk_attach`]: super::Client::instance_disk_attach
    #[derive(Clone)]
    pub struct InstanceDiskAttach<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        instance_name: Option<types::Name>,
        body: Option<types::DiskIdentifier>,
    }

    impl<'a> InstanceDiskAttach<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                instance_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn instance_name(mut self, value: types::Name) -> Self {
            self.instance_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::DiskIdentifier) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances/{instance_name}/disks/attach`
        pub async fn send(self) -> Result<ResponseValue<types::Disk>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                instance_name,
                body,
            } = self;
            let (organization_name, project_name, instance_name, body) =
                match (organization_name, project_name, instance_name, body) {
                    (
                        Some(organization_name),
                        Some(project_name),
                        Some(instance_name),
                        Some(body),
                    ) => (organization_name, project_name, instance_name, body),
                    (organization_name, project_name, instance_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if instance_name.is_none() {
                            missing.push(stringify!(instance_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/instances/{}/disks/attach",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&instance_name.to_string()),
            );
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                202u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::instance_disk_detach`]
    ///
    ///[`Client::instance_disk_detach`]: super::Client::instance_disk_detach
    #[derive(Clone)]
    pub struct InstanceDiskDetach<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        instance_name: Option<types::Name>,
        body: Option<types::DiskIdentifier>,
    }

    impl<'a> InstanceDiskDetach<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                instance_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn instance_name(mut self, value: types::Name) -> Self {
            self.instance_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::DiskIdentifier) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances/{instance_name}/disks/detach`
        pub async fn send(self) -> Result<ResponseValue<types::Disk>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                instance_name,
                body,
            } = self;
            let (organization_name, project_name, instance_name, body) =
                match (organization_name, project_name, instance_name, body) {
                    (
                        Some(organization_name),
                        Some(project_name),
                        Some(instance_name),
                        Some(body),
                    ) => (organization_name, project_name, instance_name, body),
                    (organization_name, project_name, instance_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if instance_name.is_none() {
                            missing.push(stringify!(instance_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/instances/{}/disks/detach",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&instance_name.to_string()),
            );
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                202u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::instance_migrate`]
    ///
    ///[`Client::instance_migrate`]: super::Client::instance_migrate
    #[derive(Clone)]
    pub struct InstanceMigrate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        instance_name: Option<types::Name>,
        body: Option<types::InstanceMigrate>,
    }

    impl<'a> InstanceMigrate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                instance_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn instance_name(mut self, value: types::Name) -> Self {
            self.instance_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::InstanceMigrate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances/{instance_name}/migrate`
        pub async fn send(self) -> Result<ResponseValue<types::Instance>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                instance_name,
                body,
            } = self;
            let (organization_name, project_name, instance_name, body) =
                match (organization_name, project_name, instance_name, body) {
                    (
                        Some(organization_name),
                        Some(project_name),
                        Some(instance_name),
                        Some(body),
                    ) => (organization_name, project_name, instance_name, body),
                    (organization_name, project_name, instance_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if instance_name.is_none() {
                            missing.push(stringify!(instance_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/instances/{}/migrate",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&instance_name.to_string()),
            );
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::instance_network_interface_list`]
    ///
    ///[`Client::instance_network_interface_list`]: super::Client::instance_network_interface_list
    #[derive(Clone)]
    pub struct InstanceNetworkInterfaceList<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        instance_name: Option<types::Name>,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameSortMode>,
    }

    impl<'a> InstanceNetworkInterfaceList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                instance_name: None,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn instance_name(mut self, value: types::Name) -> Self {
            self.instance_name = Some(value);
            self
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances/{instance_name}/network-interfaces`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::NetworkInterfaceResultsPage>, Error<types::Error>>
        {
            let Self {
                client,
                organization_name,
                project_name,
                instance_name,
                limit,
                page_token,
                sort_by,
            } = self;
            let (organization_name, project_name, instance_name) =
                match (organization_name, project_name, instance_name) {
                    (Some(organization_name), Some(project_name), Some(instance_name)) => {
                        (organization_name, project_name, instance_name)
                    }
                    (organization_name, project_name, instance_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if instance_name.is_none() {
                            missing.push(stringify!(instance_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/instances/{}/network-interfaces",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&instance_name.to_string()),
            );
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances/{instance_name}/network-interfaces`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::NetworkInterface, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::instance_network_interface_create`]
    ///
    ///[`Client::instance_network_interface_create`]: super::Client::instance_network_interface_create
    #[derive(Clone)]
    pub struct InstanceNetworkInterfaceCreate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        instance_name: Option<types::Name>,
        body: Option<types::NetworkInterfaceCreate>,
    }

    impl<'a> InstanceNetworkInterfaceCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                instance_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn instance_name(mut self, value: types::Name) -> Self {
            self.instance_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::NetworkInterfaceCreate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances/{instance_name}/network-interfaces`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::NetworkInterface>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                instance_name,
                body,
            } = self;
            let (organization_name, project_name, instance_name, body) =
                match (organization_name, project_name, instance_name, body) {
                    (
                        Some(organization_name),
                        Some(project_name),
                        Some(instance_name),
                        Some(body),
                    ) => (organization_name, project_name, instance_name, body),
                    (organization_name, project_name, instance_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if instance_name.is_none() {
                            missing.push(stringify!(instance_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/instances/{}/network-interfaces",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&instance_name.to_string()),
            );
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::instance_network_interface_view`]
    ///
    ///[`Client::instance_network_interface_view`]: super::Client::instance_network_interface_view
    #[derive(Clone)]
    pub struct InstanceNetworkInterfaceView<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        instance_name: Option<types::Name>,
        interface_name: Option<types::Name>,
    }

    impl<'a> InstanceNetworkInterfaceView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                instance_name: None,
                interface_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn instance_name(mut self, value: types::Name) -> Self {
            self.instance_name = Some(value);
            self
        }

        pub fn interface_name(mut self, value: types::Name) -> Self {
            self.interface_name = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances/{instance_name}/network-interfaces/{interface_name}`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::NetworkInterface>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                instance_name,
                interface_name,
            } = self;
            let (organization_name, project_name, instance_name, interface_name) = match (
                organization_name,
                project_name,
                instance_name,
                interface_name,
            ) {
                (
                    Some(organization_name),
                    Some(project_name),
                    Some(instance_name),
                    Some(interface_name),
                ) => (
                    organization_name,
                    project_name,
                    instance_name,
                    interface_name,
                ),
                (organization_name, project_name, instance_name, interface_name) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    if project_name.is_none() {
                        missing.push(stringify!(project_name));
                    }
                    if instance_name.is_none() {
                        missing.push(stringify!(instance_name));
                    }
                    if interface_name.is_none() {
                        missing.push(stringify!(interface_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/projects/{}/instances/{}/network-interfaces/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&instance_name.to_string()),
                encode_path(&interface_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::instance_network_interface_update`]
    ///
    ///[`Client::instance_network_interface_update`]: super::Client::instance_network_interface_update
    #[derive(Clone)]
    pub struct InstanceNetworkInterfaceUpdate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        instance_name: Option<types::Name>,
        interface_name: Option<types::Name>,
        body: Option<types::NetworkInterfaceUpdate>,
    }

    impl<'a> InstanceNetworkInterfaceUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                instance_name: None,
                interface_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn instance_name(mut self, value: types::Name) -> Self {
            self.instance_name = Some(value);
            self
        }

        pub fn interface_name(mut self, value: types::Name) -> Self {
            self.interface_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::NetworkInterfaceUpdate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `PUT` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances/{instance_name}/network-interfaces/{interface_name}`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::NetworkInterface>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                instance_name,
                interface_name,
                body,
            } = self;
            let (organization_name, project_name, instance_name, interface_name, body) = match (
                organization_name,
                project_name,
                instance_name,
                interface_name,
                body,
            ) {
                (
                    Some(organization_name),
                    Some(project_name),
                    Some(instance_name),
                    Some(interface_name),
                    Some(body),
                ) => (
                    organization_name,
                    project_name,
                    instance_name,
                    interface_name,
                    body,
                ),
                (organization_name, project_name, instance_name, interface_name, body) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    if project_name.is_none() {
                        missing.push(stringify!(project_name));
                    }
                    if instance_name.is_none() {
                        missing.push(stringify!(instance_name));
                    }
                    if interface_name.is_none() {
                        missing.push(stringify!(interface_name));
                    }
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/projects/{}/instances/{}/network-interfaces/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&instance_name.to_string()),
                encode_path(&interface_name.to_string()),
            );
            let request = client.client.put(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::instance_network_interface_delete`]
    ///
    ///[`Client::instance_network_interface_delete`]: super::Client::instance_network_interface_delete
    #[derive(Clone)]
    pub struct InstanceNetworkInterfaceDelete<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        instance_name: Option<types::Name>,
        interface_name: Option<types::Name>,
    }

    impl<'a> InstanceNetworkInterfaceDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                instance_name: None,
                interface_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn instance_name(mut self, value: types::Name) -> Self {
            self.instance_name = Some(value);
            self
        }

        pub fn interface_name(mut self, value: types::Name) -> Self {
            self.interface_name = Some(value);
            self
        }

        ///Sends a `DELETE` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances/{instance_name}/network-interfaces/{interface_name}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                instance_name,
                interface_name,
            } = self;
            let (organization_name, project_name, instance_name, interface_name) = match (
                organization_name,
                project_name,
                instance_name,
                interface_name,
            ) {
                (
                    Some(organization_name),
                    Some(project_name),
                    Some(instance_name),
                    Some(interface_name),
                ) => (
                    organization_name,
                    project_name,
                    instance_name,
                    interface_name,
                ),
                (organization_name, project_name, instance_name, interface_name) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    if project_name.is_none() {
                        missing.push(stringify!(project_name));
                    }
                    if instance_name.is_none() {
                        missing.push(stringify!(instance_name));
                    }
                    if interface_name.is_none() {
                        missing.push(stringify!(interface_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/projects/{}/instances/{}/network-interfaces/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&instance_name.to_string()),
                encode_path(&interface_name.to_string()),
            );
            let request = client.client.delete(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::instance_reboot`]
    ///
    ///[`Client::instance_reboot`]: super::Client::instance_reboot
    #[derive(Clone)]
    pub struct InstanceReboot<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        instance_name: Option<types::Name>,
    }

    impl<'a> InstanceReboot<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                instance_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn instance_name(mut self, value: types::Name) -> Self {
            self.instance_name = Some(value);
            self
        }

        ///Sends a `POST` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances/{instance_name}/reboot`
        pub async fn send(self) -> Result<ResponseValue<types::Instance>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                instance_name,
            } = self;
            let (organization_name, project_name, instance_name) =
                match (organization_name, project_name, instance_name) {
                    (Some(organization_name), Some(project_name), Some(instance_name)) => {
                        (organization_name, project_name, instance_name)
                    }
                    (organization_name, project_name, instance_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if instance_name.is_none() {
                            missing.push(stringify!(instance_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/instances/{}/reboot",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&instance_name.to_string()),
            );
            let request = client.client.post(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                202u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::instance_serial_console`]
    ///
    ///[`Client::instance_serial_console`]: super::Client::instance_serial_console
    #[derive(Clone)]
    pub struct InstanceSerialConsole<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        instance_name: Option<types::Name>,
        from_start: Option<u64>,
        max_bytes: Option<u64>,
        most_recent: Option<u64>,
    }

    impl<'a> InstanceSerialConsole<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                instance_name: None,
                from_start: None,
                max_bytes: None,
                most_recent: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn instance_name(mut self, value: types::Name) -> Self {
            self.instance_name = Some(value);
            self
        }

        pub fn from_start(mut self, value: u64) -> Self {
            self.from_start = Some(value);
            self
        }

        pub fn max_bytes(mut self, value: u64) -> Self {
            self.max_bytes = Some(value);
            self
        }

        pub fn most_recent(mut self, value: u64) -> Self {
            self.most_recent = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances/{instance_name}/serial-console`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::InstanceSerialConsoleData>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                instance_name,
                from_start,
                max_bytes,
                most_recent,
            } = self;
            let (organization_name, project_name, instance_name) =
                match (organization_name, project_name, instance_name) {
                    (Some(organization_name), Some(project_name), Some(instance_name)) => {
                        (organization_name, project_name, instance_name)
                    }
                    (organization_name, project_name, instance_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if instance_name.is_none() {
                            missing.push(stringify!(instance_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/instances/{}/serial-console",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&instance_name.to_string()),
            );
            let mut query = Vec::new();
            if let Some(v) = &from_start {
                query.push(("from_start", v.to_string()));
            }
            if let Some(v) = &max_bytes {
                query.push(("max_bytes", v.to_string()));
            }
            if let Some(v) = &most_recent {
                query.push(("most_recent", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::instance_start`]
    ///
    ///[`Client::instance_start`]: super::Client::instance_start
    #[derive(Clone)]
    pub struct InstanceStart<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        instance_name: Option<types::Name>,
    }

    impl<'a> InstanceStart<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                instance_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn instance_name(mut self, value: types::Name) -> Self {
            self.instance_name = Some(value);
            self
        }

        ///Sends a `POST` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances/{instance_name}/start`
        pub async fn send(self) -> Result<ResponseValue<types::Instance>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                instance_name,
            } = self;
            let (organization_name, project_name, instance_name) =
                match (organization_name, project_name, instance_name) {
                    (Some(organization_name), Some(project_name), Some(instance_name)) => {
                        (organization_name, project_name, instance_name)
                    }
                    (organization_name, project_name, instance_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if instance_name.is_none() {
                            missing.push(stringify!(instance_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/instances/{}/start",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&instance_name.to_string()),
            );
            let request = client.client.post(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                202u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::instance_stop`]
    ///
    ///[`Client::instance_stop`]: super::Client::instance_stop
    #[derive(Clone)]
    pub struct InstanceStop<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        instance_name: Option<types::Name>,
    }

    impl<'a> InstanceStop<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                instance_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn instance_name(mut self, value: types::Name) -> Self {
            self.instance_name = Some(value);
            self
        }

        ///Sends a `POST` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// instances/{instance_name}/stop`
        pub async fn send(self) -> Result<ResponseValue<types::Instance>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                instance_name,
            } = self;
            let (organization_name, project_name, instance_name) =
                match (organization_name, project_name, instance_name) {
                    (Some(organization_name), Some(project_name), Some(instance_name)) => {
                        (organization_name, project_name, instance_name)
                    }
                    (organization_name, project_name, instance_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if instance_name.is_none() {
                            missing.push(stringify!(instance_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/instances/{}/stop",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&instance_name.to_string()),
            );
            let request = client.client.post(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                202u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::project_policy_view`]
    ///
    ///[`Client::project_policy_view`]: super::Client::project_policy_view
    #[derive(Clone)]
    pub struct ProjectPolicyView<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
    }

    impl<'a> ProjectPolicyView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/policy`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::ProjectRolePolicy>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
            } = self;
            let (organization_name, project_name) = match (organization_name, project_name) {
                (Some(organization_name), Some(project_name)) => (organization_name, project_name),
                (organization_name, project_name) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    if project_name.is_none() {
                        missing.push(stringify!(project_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/projects/{}/policy",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::project_policy_update`]
    ///
    ///[`Client::project_policy_update`]: super::Client::project_policy_update
    #[derive(Clone)]
    pub struct ProjectPolicyUpdate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        body: Option<types::ProjectRolePolicy>,
    }

    impl<'a> ProjectPolicyUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::ProjectRolePolicy) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `PUT` request to
        /// `/organizations/{organization_name}/projects/{project_name}/policy`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::ProjectRolePolicy>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                body,
            } = self;
            let (organization_name, project_name, body) =
                match (organization_name, project_name, body) {
                    (Some(organization_name), Some(project_name), Some(body)) => {
                        (organization_name, project_name, body)
                    }
                    (organization_name, project_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/policy",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
            );
            let request = client.client.put(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::snapshot_list`]
    ///
    ///[`Client::snapshot_list`]: super::Client::snapshot_list
    #[derive(Clone)]
    pub struct SnapshotList<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameSortMode>,
    }

    impl<'a> SnapshotList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// snapshots`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SnapshotResultsPage>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                limit,
                page_token,
                sort_by,
            } = self;
            let (organization_name, project_name) = match (organization_name, project_name) {
                (Some(organization_name), Some(project_name)) => (organization_name, project_name),
                (organization_name, project_name) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    if project_name.is_none() {
                        missing.push(stringify!(project_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/projects/{}/snapshots",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
            );
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// snapshots`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Snapshot, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::snapshot_create`]
    ///
    ///[`Client::snapshot_create`]: super::Client::snapshot_create
    #[derive(Clone)]
    pub struct SnapshotCreate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        body: Option<types::SnapshotCreate>,
    }

    impl<'a> SnapshotCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::SnapshotCreate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// snapshots`
        pub async fn send(self) -> Result<ResponseValue<types::Snapshot>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                body,
            } = self;
            let (organization_name, project_name, body) =
                match (organization_name, project_name, body) {
                    (Some(organization_name), Some(project_name), Some(body)) => {
                        (organization_name, project_name, body)
                    }
                    (organization_name, project_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/snapshots",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
            );
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::snapshot_view`]
    ///
    ///[`Client::snapshot_view`]: super::Client::snapshot_view
    #[derive(Clone)]
    pub struct SnapshotView<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        snapshot_name: Option<types::Name>,
    }

    impl<'a> SnapshotView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                snapshot_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn snapshot_name(mut self, value: types::Name) -> Self {
            self.snapshot_name = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// snapshots/{snapshot_name}`
        pub async fn send(self) -> Result<ResponseValue<types::Snapshot>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                snapshot_name,
            } = self;
            let (organization_name, project_name, snapshot_name) =
                match (organization_name, project_name, snapshot_name) {
                    (Some(organization_name), Some(project_name), Some(snapshot_name)) => {
                        (organization_name, project_name, snapshot_name)
                    }
                    (organization_name, project_name, snapshot_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if snapshot_name.is_none() {
                            missing.push(stringify!(snapshot_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/snapshots/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&snapshot_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::snapshot_delete`]
    ///
    ///[`Client::snapshot_delete`]: super::Client::snapshot_delete
    #[derive(Clone)]
    pub struct SnapshotDelete<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        snapshot_name: Option<types::Name>,
    }

    impl<'a> SnapshotDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                snapshot_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn snapshot_name(mut self, value: types::Name) -> Self {
            self.snapshot_name = Some(value);
            self
        }

        ///Sends a `DELETE` request to
        /// `/organizations/{organization_name}/projects/{project_name}/
        /// snapshots/{snapshot_name}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                snapshot_name,
            } = self;
            let (organization_name, project_name, snapshot_name) =
                match (organization_name, project_name, snapshot_name) {
                    (Some(organization_name), Some(project_name), Some(snapshot_name)) => {
                        (organization_name, project_name, snapshot_name)
                    }
                    (organization_name, project_name, snapshot_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if snapshot_name.is_none() {
                            missing.push(stringify!(snapshot_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/snapshots/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&snapshot_name.to_string()),
            );
            let request = client.client.delete(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_list`]
    ///
    ///[`Client::vpc_list`]: super::Client::vpc_list
    #[derive(Clone)]
    pub struct VpcList<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameSortMode>,
    }

    impl<'a> VpcList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::VpcResultsPage>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                limit,
                page_token,
                sort_by,
            } = self;
            let (organization_name, project_name) = match (organization_name, project_name) {
                (Some(organization_name), Some(project_name)) => (organization_name, project_name),
                (organization_name, project_name) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    if project_name.is_none() {
                        missing.push(stringify!(project_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
            );
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Vpc, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::vpc_create`]
    ///
    ///[`Client::vpc_create`]: super::Client::vpc_create
    #[derive(Clone)]
    pub struct VpcCreate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        body: Option<types::VpcCreate>,
    }

    impl<'a> VpcCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::VpcCreate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs`
        pub async fn send(self) -> Result<ResponseValue<types::Vpc>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                body,
            } = self;
            let (organization_name, project_name, body) =
                match (organization_name, project_name, body) {
                    (Some(organization_name), Some(project_name), Some(body)) => {
                        (organization_name, project_name, body)
                    }
                    (organization_name, project_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
            );
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_view`]
    ///
    ///[`Client::vpc_view`]: super::Client::vpc_view
    #[derive(Clone)]
    pub struct VpcView<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
    }

    impl<'a> VpcView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}`
        pub async fn send(self) -> Result<ResponseValue<types::Vpc>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
            } = self;
            let (organization_name, project_name, vpc_name) =
                match (organization_name, project_name, vpc_name) {
                    (Some(organization_name), Some(project_name), Some(vpc_name)) => {
                        (organization_name, project_name, vpc_name)
                    }
                    (organization_name, project_name, vpc_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_update`]
    ///
    ///[`Client::vpc_update`]: super::Client::vpc_update
    #[derive(Clone)]
    pub struct VpcUpdate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        body: Option<types::VpcUpdate>,
    }

    impl<'a> VpcUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::VpcUpdate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `PUT` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}`
        pub async fn send(self) -> Result<ResponseValue<types::Vpc>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                body,
            } = self;
            let (organization_name, project_name, vpc_name, body) =
                match (organization_name, project_name, vpc_name, body) {
                    (Some(organization_name), Some(project_name), Some(vpc_name), Some(body)) => {
                        (organization_name, project_name, vpc_name, body)
                    }
                    (organization_name, project_name, vpc_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
            );
            let request = client.client.put(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_delete`]
    ///
    ///[`Client::vpc_delete`]: super::Client::vpc_delete
    #[derive(Clone)]
    pub struct VpcDelete<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
    }

    impl<'a> VpcDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        ///Sends a `DELETE` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
            } = self;
            let (organization_name, project_name, vpc_name) =
                match (organization_name, project_name, vpc_name) {
                    (Some(organization_name), Some(project_name), Some(vpc_name)) => {
                        (organization_name, project_name, vpc_name)
                    }
                    (organization_name, project_name, vpc_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
            );
            let request = client.client.delete(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_firewall_rules_view`]
    ///
    ///[`Client::vpc_firewall_rules_view`]: super::Client::vpc_firewall_rules_view
    #[derive(Clone)]
    pub struct VpcFirewallRulesView<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
    }

    impl<'a> VpcFirewallRulesView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/firewall/rules`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::VpcFirewallRules>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
            } = self;
            let (organization_name, project_name, vpc_name) =
                match (organization_name, project_name, vpc_name) {
                    (Some(organization_name), Some(project_name), Some(vpc_name)) => {
                        (organization_name, project_name, vpc_name)
                    }
                    (organization_name, project_name, vpc_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/firewall/rules",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_firewall_rules_update`]
    ///
    ///[`Client::vpc_firewall_rules_update`]: super::Client::vpc_firewall_rules_update
    #[derive(Clone)]
    pub struct VpcFirewallRulesUpdate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        body: Option<types::VpcFirewallRuleUpdateParams>,
    }

    impl<'a> VpcFirewallRulesUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::VpcFirewallRuleUpdateParams) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `PUT` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/firewall/rules`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::VpcFirewallRules>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                body,
            } = self;
            let (organization_name, project_name, vpc_name, body) =
                match (organization_name, project_name, vpc_name, body) {
                    (Some(organization_name), Some(project_name), Some(vpc_name), Some(body)) => {
                        (organization_name, project_name, vpc_name, body)
                    }
                    (organization_name, project_name, vpc_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/firewall/rules",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
            );
            let request = client.client.put(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_router_list`]
    ///
    ///[`Client::vpc_router_list`]: super::Client::vpc_router_list
    #[derive(Clone)]
    pub struct VpcRouterList<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameSortMode>,
    }

    impl<'a> VpcRouterList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/routers`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::VpcRouterResultsPage>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                limit,
                page_token,
                sort_by,
            } = self;
            let (organization_name, project_name, vpc_name) =
                match (organization_name, project_name, vpc_name) {
                    (Some(organization_name), Some(project_name), Some(vpc_name)) => {
                        (organization_name, project_name, vpc_name)
                    }
                    (organization_name, project_name, vpc_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/routers",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
            );
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/routers`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::VpcRouter, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::vpc_router_create`]
    ///
    ///[`Client::vpc_router_create`]: super::Client::vpc_router_create
    #[derive(Clone)]
    pub struct VpcRouterCreate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        body: Option<types::VpcRouterCreate>,
    }

    impl<'a> VpcRouterCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::VpcRouterCreate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/routers`
        pub async fn send(self) -> Result<ResponseValue<types::VpcRouter>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                body,
            } = self;
            let (organization_name, project_name, vpc_name, body) =
                match (organization_name, project_name, vpc_name, body) {
                    (Some(organization_name), Some(project_name), Some(vpc_name), Some(body)) => {
                        (organization_name, project_name, vpc_name, body)
                    }
                    (organization_name, project_name, vpc_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/routers",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
            );
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_router_view`]
    ///
    ///[`Client::vpc_router_view`]: super::Client::vpc_router_view
    #[derive(Clone)]
    pub struct VpcRouterView<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        router_name: Option<types::Name>,
    }

    impl<'a> VpcRouterView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                router_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn router_name(mut self, value: types::Name) -> Self {
            self.router_name = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/routers/{router_name}`
        pub async fn send(self) -> Result<ResponseValue<types::VpcRouter>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                router_name,
            } = self;
            let (organization_name, project_name, vpc_name, router_name) =
                match (organization_name, project_name, vpc_name, router_name) {
                    (
                        Some(organization_name),
                        Some(project_name),
                        Some(vpc_name),
                        Some(router_name),
                    ) => (organization_name, project_name, vpc_name, router_name),
                    (organization_name, project_name, vpc_name, router_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        if router_name.is_none() {
                            missing.push(stringify!(router_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/routers/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
                encode_path(&router_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_router_update`]
    ///
    ///[`Client::vpc_router_update`]: super::Client::vpc_router_update
    #[derive(Clone)]
    pub struct VpcRouterUpdate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        router_name: Option<types::Name>,
        body: Option<types::VpcRouterUpdate>,
    }

    impl<'a> VpcRouterUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                router_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn router_name(mut self, value: types::Name) -> Self {
            self.router_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::VpcRouterUpdate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `PUT` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/routers/{router_name}`
        pub async fn send(self) -> Result<ResponseValue<types::VpcRouter>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                router_name,
                body,
            } = self;
            let (organization_name, project_name, vpc_name, router_name, body) =
                match (organization_name, project_name, vpc_name, router_name, body) {
                    (
                        Some(organization_name),
                        Some(project_name),
                        Some(vpc_name),
                        Some(router_name),
                        Some(body),
                    ) => (organization_name, project_name, vpc_name, router_name, body),
                    (organization_name, project_name, vpc_name, router_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        if router_name.is_none() {
                            missing.push(stringify!(router_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/routers/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
                encode_path(&router_name.to_string()),
            );
            let request = client.client.put(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_router_delete`]
    ///
    ///[`Client::vpc_router_delete`]: super::Client::vpc_router_delete
    #[derive(Clone)]
    pub struct VpcRouterDelete<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        router_name: Option<types::Name>,
    }

    impl<'a> VpcRouterDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                router_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn router_name(mut self, value: types::Name) -> Self {
            self.router_name = Some(value);
            self
        }

        ///Sends a `DELETE` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/routers/{router_name}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                router_name,
            } = self;
            let (organization_name, project_name, vpc_name, router_name) =
                match (organization_name, project_name, vpc_name, router_name) {
                    (
                        Some(organization_name),
                        Some(project_name),
                        Some(vpc_name),
                        Some(router_name),
                    ) => (organization_name, project_name, vpc_name, router_name),
                    (organization_name, project_name, vpc_name, router_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        if router_name.is_none() {
                            missing.push(stringify!(router_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/routers/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
                encode_path(&router_name.to_string()),
            );
            let request = client.client.delete(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_router_route_list`]
    ///
    ///[`Client::vpc_router_route_list`]: super::Client::vpc_router_route_list
    #[derive(Clone)]
    pub struct VpcRouterRouteList<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        router_name: Option<types::Name>,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameSortMode>,
    }

    impl<'a> VpcRouterRouteList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                router_name: None,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn router_name(mut self, value: types::Name) -> Self {
            self.router_name = Some(value);
            self
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/routers/{router_name}/routes`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::RouterRouteResultsPage>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                router_name,
                limit,
                page_token,
                sort_by,
            } = self;
            let (organization_name, project_name, vpc_name, router_name) =
                match (organization_name, project_name, vpc_name, router_name) {
                    (
                        Some(organization_name),
                        Some(project_name),
                        Some(vpc_name),
                        Some(router_name),
                    ) => (organization_name, project_name, vpc_name, router_name),
                    (organization_name, project_name, vpc_name, router_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        if router_name.is_none() {
                            missing.push(stringify!(router_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/routers/{}/routes",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
                encode_path(&router_name.to_string()),
            );
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/routers/{router_name}/routes`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::RouterRoute, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::vpc_router_route_create`]
    ///
    ///[`Client::vpc_router_route_create`]: super::Client::vpc_router_route_create
    #[derive(Clone)]
    pub struct VpcRouterRouteCreate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        router_name: Option<types::Name>,
        body: Option<types::RouterRouteCreateParams>,
    }

    impl<'a> VpcRouterRouteCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                router_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn router_name(mut self, value: types::Name) -> Self {
            self.router_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::RouterRouteCreateParams) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/routers/{router_name}/routes`
        pub async fn send(self) -> Result<ResponseValue<types::RouterRoute>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                router_name,
                body,
            } = self;
            let (organization_name, project_name, vpc_name, router_name, body) =
                match (organization_name, project_name, vpc_name, router_name, body) {
                    (
                        Some(organization_name),
                        Some(project_name),
                        Some(vpc_name),
                        Some(router_name),
                        Some(body),
                    ) => (organization_name, project_name, vpc_name, router_name, body),
                    (organization_name, project_name, vpc_name, router_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        if router_name.is_none() {
                            missing.push(stringify!(router_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/routers/{}/routes",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
                encode_path(&router_name.to_string()),
            );
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_router_route_view`]
    ///
    ///[`Client::vpc_router_route_view`]: super::Client::vpc_router_route_view
    #[derive(Clone)]
    pub struct VpcRouterRouteView<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        router_name: Option<types::Name>,
        route_name: Option<types::Name>,
    }

    impl<'a> VpcRouterRouteView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                router_name: None,
                route_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn router_name(mut self, value: types::Name) -> Self {
            self.router_name = Some(value);
            self
        }

        pub fn route_name(mut self, value: types::Name) -> Self {
            self.route_name = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/routers/{router_name}/routes/{route_name}`
        pub async fn send(self) -> Result<ResponseValue<types::RouterRoute>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                router_name,
                route_name,
            } = self;
            let (organization_name, project_name, vpc_name, router_name, route_name) = match (
                organization_name,
                project_name,
                vpc_name,
                router_name,
                route_name,
            ) {
                (
                    Some(organization_name),
                    Some(project_name),
                    Some(vpc_name),
                    Some(router_name),
                    Some(route_name),
                ) => (
                    organization_name,
                    project_name,
                    vpc_name,
                    router_name,
                    route_name,
                ),
                (organization_name, project_name, vpc_name, router_name, route_name) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    if project_name.is_none() {
                        missing.push(stringify!(project_name));
                    }
                    if vpc_name.is_none() {
                        missing.push(stringify!(vpc_name));
                    }
                    if router_name.is_none() {
                        missing.push(stringify!(router_name));
                    }
                    if route_name.is_none() {
                        missing.push(stringify!(route_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/routers/{}/routes/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
                encode_path(&router_name.to_string()),
                encode_path(&route_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_router_route_update`]
    ///
    ///[`Client::vpc_router_route_update`]: super::Client::vpc_router_route_update
    #[derive(Clone)]
    pub struct VpcRouterRouteUpdate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        router_name: Option<types::Name>,
        route_name: Option<types::Name>,
        body: Option<types::RouterRouteUpdateParams>,
    }

    impl<'a> VpcRouterRouteUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                router_name: None,
                route_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn router_name(mut self, value: types::Name) -> Self {
            self.router_name = Some(value);
            self
        }

        pub fn route_name(mut self, value: types::Name) -> Self {
            self.route_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::RouterRouteUpdateParams) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `PUT` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/routers/{router_name}/routes/{route_name}`
        pub async fn send(self) -> Result<ResponseValue<types::RouterRoute>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                router_name,
                route_name,
                body,
            } = self;
            let (organization_name, project_name, vpc_name, router_name, route_name, body) = match (
                organization_name,
                project_name,
                vpc_name,
                router_name,
                route_name,
                body,
            ) {
                (
                    Some(organization_name),
                    Some(project_name),
                    Some(vpc_name),
                    Some(router_name),
                    Some(route_name),
                    Some(body),
                ) => (
                    organization_name,
                    project_name,
                    vpc_name,
                    router_name,
                    route_name,
                    body,
                ),
                (organization_name, project_name, vpc_name, router_name, route_name, body) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    if project_name.is_none() {
                        missing.push(stringify!(project_name));
                    }
                    if vpc_name.is_none() {
                        missing.push(stringify!(vpc_name));
                    }
                    if router_name.is_none() {
                        missing.push(stringify!(router_name));
                    }
                    if route_name.is_none() {
                        missing.push(stringify!(route_name));
                    }
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/routers/{}/routes/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
                encode_path(&router_name.to_string()),
                encode_path(&route_name.to_string()),
            );
            let request = client.client.put(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_router_route_delete`]
    ///
    ///[`Client::vpc_router_route_delete`]: super::Client::vpc_router_route_delete
    #[derive(Clone)]
    pub struct VpcRouterRouteDelete<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        router_name: Option<types::Name>,
        route_name: Option<types::Name>,
    }

    impl<'a> VpcRouterRouteDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                router_name: None,
                route_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn router_name(mut self, value: types::Name) -> Self {
            self.router_name = Some(value);
            self
        }

        pub fn route_name(mut self, value: types::Name) -> Self {
            self.route_name = Some(value);
            self
        }

        ///Sends a `DELETE` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/routers/{router_name}/routes/{route_name}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                router_name,
                route_name,
            } = self;
            let (organization_name, project_name, vpc_name, router_name, route_name) = match (
                organization_name,
                project_name,
                vpc_name,
                router_name,
                route_name,
            ) {
                (
                    Some(organization_name),
                    Some(project_name),
                    Some(vpc_name),
                    Some(router_name),
                    Some(route_name),
                ) => (
                    organization_name,
                    project_name,
                    vpc_name,
                    router_name,
                    route_name,
                ),
                (organization_name, project_name, vpc_name, router_name, route_name) => {
                    let mut missing = Vec::new();
                    if organization_name.is_none() {
                        missing.push(stringify!(organization_name));
                    }
                    if project_name.is_none() {
                        missing.push(stringify!(project_name));
                    }
                    if vpc_name.is_none() {
                        missing.push(stringify!(vpc_name));
                    }
                    if router_name.is_none() {
                        missing.push(stringify!(router_name));
                    }
                    if route_name.is_none() {
                        missing.push(stringify!(route_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/routers/{}/routes/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
                encode_path(&router_name.to_string()),
                encode_path(&route_name.to_string()),
            );
            let request = client.client.delete(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_subnet_list`]
    ///
    ///[`Client::vpc_subnet_list`]: super::Client::vpc_subnet_list
    #[derive(Clone)]
    pub struct VpcSubnetList<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameSortMode>,
    }

    impl<'a> VpcSubnetList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/subnets`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::VpcSubnetResultsPage>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                limit,
                page_token,
                sort_by,
            } = self;
            let (organization_name, project_name, vpc_name) =
                match (organization_name, project_name, vpc_name) {
                    (Some(organization_name), Some(project_name), Some(vpc_name)) => {
                        (organization_name, project_name, vpc_name)
                    }
                    (organization_name, project_name, vpc_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/subnets",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
            );
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/subnets`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::VpcSubnet, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::vpc_subnet_create`]
    ///
    ///[`Client::vpc_subnet_create`]: super::Client::vpc_subnet_create
    #[derive(Clone)]
    pub struct VpcSubnetCreate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        body: Option<types::VpcSubnetCreate>,
    }

    impl<'a> VpcSubnetCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::VpcSubnetCreate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/subnets`
        pub async fn send(self) -> Result<ResponseValue<types::VpcSubnet>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                body,
            } = self;
            let (organization_name, project_name, vpc_name, body) =
                match (organization_name, project_name, vpc_name, body) {
                    (Some(organization_name), Some(project_name), Some(vpc_name), Some(body)) => {
                        (organization_name, project_name, vpc_name, body)
                    }
                    (organization_name, project_name, vpc_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/subnets",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
            );
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_subnet_view`]
    ///
    ///[`Client::vpc_subnet_view`]: super::Client::vpc_subnet_view
    #[derive(Clone)]
    pub struct VpcSubnetView<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        subnet_name: Option<types::Name>,
    }

    impl<'a> VpcSubnetView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                subnet_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn subnet_name(mut self, value: types::Name) -> Self {
            self.subnet_name = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/subnets/{subnet_name}`
        pub async fn send(self) -> Result<ResponseValue<types::VpcSubnet>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                subnet_name,
            } = self;
            let (organization_name, project_name, vpc_name, subnet_name) =
                match (organization_name, project_name, vpc_name, subnet_name) {
                    (
                        Some(organization_name),
                        Some(project_name),
                        Some(vpc_name),
                        Some(subnet_name),
                    ) => (organization_name, project_name, vpc_name, subnet_name),
                    (organization_name, project_name, vpc_name, subnet_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        if subnet_name.is_none() {
                            missing.push(stringify!(subnet_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/subnets/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
                encode_path(&subnet_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_subnet_update`]
    ///
    ///[`Client::vpc_subnet_update`]: super::Client::vpc_subnet_update
    #[derive(Clone)]
    pub struct VpcSubnetUpdate<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        subnet_name: Option<types::Name>,
        body: Option<types::VpcSubnetUpdate>,
    }

    impl<'a> VpcSubnetUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                subnet_name: None,
                body: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn subnet_name(mut self, value: types::Name) -> Self {
            self.subnet_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::VpcSubnetUpdate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `PUT` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/subnets/{subnet_name}`
        pub async fn send(self) -> Result<ResponseValue<types::VpcSubnet>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                subnet_name,
                body,
            } = self;
            let (organization_name, project_name, vpc_name, subnet_name, body) =
                match (organization_name, project_name, vpc_name, subnet_name, body) {
                    (
                        Some(organization_name),
                        Some(project_name),
                        Some(vpc_name),
                        Some(subnet_name),
                        Some(body),
                    ) => (organization_name, project_name, vpc_name, subnet_name, body),
                    (organization_name, project_name, vpc_name, subnet_name, body) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        if subnet_name.is_none() {
                            missing.push(stringify!(subnet_name));
                        }
                        if body.is_none() {
                            missing.push(stringify!(body));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/subnets/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
                encode_path(&subnet_name.to_string()),
            );
            let request = client.client.put(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_subnet_delete`]
    ///
    ///[`Client::vpc_subnet_delete`]: super::Client::vpc_subnet_delete
    #[derive(Clone)]
    pub struct VpcSubnetDelete<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        subnet_name: Option<types::Name>,
    }

    impl<'a> VpcSubnetDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                subnet_name: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn subnet_name(mut self, value: types::Name) -> Self {
            self.subnet_name = Some(value);
            self
        }

        ///Sends a `DELETE` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/subnets/{subnet_name}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                subnet_name,
            } = self;
            let (organization_name, project_name, vpc_name, subnet_name) =
                match (organization_name, project_name, vpc_name, subnet_name) {
                    (
                        Some(organization_name),
                        Some(project_name),
                        Some(vpc_name),
                        Some(subnet_name),
                    ) => (organization_name, project_name, vpc_name, subnet_name),
                    (organization_name, project_name, vpc_name, subnet_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        if subnet_name.is_none() {
                            missing.push(stringify!(subnet_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/subnets/{}",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
                encode_path(&subnet_name.to_string()),
            );
            let request = client.client.delete(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::vpc_subnet_list_network_interfaces`]
    ///
    ///[`Client::vpc_subnet_list_network_interfaces`]: super::Client::vpc_subnet_list_network_interfaces
    #[derive(Clone)]
    pub struct VpcSubnetListNetworkInterfaces<'a> {
        client: &'a super::Client,
        organization_name: Option<types::Name>,
        project_name: Option<types::Name>,
        vpc_name: Option<types::Name>,
        subnet_name: Option<types::Name>,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameSortMode>,
    }

    impl<'a> VpcSubnetListNetworkInterfaces<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                organization_name: None,
                project_name: None,
                vpc_name: None,
                subnet_name: None,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn organization_name(mut self, value: types::Name) -> Self {
            self.organization_name = Some(value);
            self
        }

        pub fn project_name(mut self, value: types::Name) -> Self {
            self.project_name = Some(value);
            self
        }

        pub fn vpc_name(mut self, value: types::Name) -> Self {
            self.vpc_name = Some(value);
            self
        }

        pub fn subnet_name(mut self, value: types::Name) -> Self {
            self.subnet_name = Some(value);
            self
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/subnets/{subnet_name}/network-interfaces`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::NetworkInterfaceResultsPage>, Error<types::Error>>
        {
            let Self {
                client,
                organization_name,
                project_name,
                vpc_name,
                subnet_name,
                limit,
                page_token,
                sort_by,
            } = self;
            let (organization_name, project_name, vpc_name, subnet_name) =
                match (organization_name, project_name, vpc_name, subnet_name) {
                    (
                        Some(organization_name),
                        Some(project_name),
                        Some(vpc_name),
                        Some(subnet_name),
                    ) => (organization_name, project_name, vpc_name, subnet_name),
                    (organization_name, project_name, vpc_name, subnet_name) => {
                        let mut missing = Vec::new();
                        if organization_name.is_none() {
                            missing.push(stringify!(organization_name));
                        }
                        if project_name.is_none() {
                            missing.push(stringify!(project_name));
                        }
                        if vpc_name.is_none() {
                            missing.push(stringify!(vpc_name));
                        }
                        if subnet_name.is_none() {
                            missing.push(stringify!(subnet_name));
                        }
                        return Err(super::Error::InvalidRequest(format!(
                            "the following parameters are required: {}",
                            missing.join(", "),
                        )));
                    }
                };
            let url = format!(
                "{}/organizations/{}/projects/{}/vpcs/{}/subnets/{}/network-interfaces",
                client.baseurl,
                encode_path(&organization_name.to_string()),
                encode_path(&project_name.to_string()),
                encode_path(&vpc_name.to_string()),
                encode_path(&subnet_name.to_string()),
            );
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to
        /// `/organizations/{organization_name}/projects/{project_name}/vpcs/
        /// {vpc_name}/subnets/{subnet_name}/network-interfaces`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::NetworkInterface, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::policy_view`]
    ///
    ///[`Client::policy_view`]: super::Client::policy_view
    #[derive(Clone)]
    pub struct PolicyView<'a> {
        client: &'a super::Client,
    }

    impl<'a> PolicyView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client }
        }

        ///Sends a `GET` request to `/policy`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::FleetRolePolicy>, Error<types::Error>> {
            let Self { client } = self;
            let url = format!("{}/policy", client.baseurl,);
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::policy_update`]
    ///
    ///[`Client::policy_update`]: super::Client::policy_update
    #[derive(Clone)]
    pub struct PolicyUpdate<'a> {
        client: &'a super::Client,
        body: Option<types::FleetRolePolicy>,
    }

    impl<'a> PolicyUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, body: None }
        }

        pub fn body(mut self, value: types::FleetRolePolicy) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `PUT` request to `/policy`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::FleetRolePolicy>, Error<types::Error>> {
            let Self { client, body } = self;
            let (body,) = match (body,) {
                (Some(body),) => (body,),
                (body,) => {
                    let mut missing = Vec::new();
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!("{}/policy", client.baseurl,);
            let request = client.client.put(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::role_list`]
    ///
    ///[`Client::role_list`]: super::Client::role_list
    #[derive(Clone)]
    pub struct RoleList<'a> {
        client: &'a super::Client,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
    }

    impl<'a> RoleList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                limit: None,
                page_token: None,
            }
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        ///Sends a `GET` request to `/roles`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::RoleResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
            } = self;
            let url = format!("{}/roles", client.baseurl,);
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to `/roles`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Role, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::role_view`]
    ///
    ///[`Client::role_view`]: super::Client::role_view
    #[derive(Clone)]
    pub struct RoleView<'a> {
        client: &'a super::Client,
        role_name: Option<String>,
    }

    impl<'a> RoleView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                role_name: None,
            }
        }

        pub fn role_name<S: ToString>(mut self, value: S) -> Self {
            self.role_name = Some(value.to_string());
            self
        }

        ///Sends a `GET` request to `/roles/{role_name}`
        pub async fn send(self) -> Result<ResponseValue<types::Role>, Error<types::Error>> {
            let Self { client, role_name } = self;
            let (role_name,) = match (role_name,) {
                (Some(role_name),) => (role_name,),
                (role_name,) => {
                    let mut missing = Vec::new();
                    if role_name.is_none() {
                        missing.push(stringify!(role_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/roles/{}",
                client.baseurl,
                encode_path(&role_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::saga_list`]
    ///
    ///[`Client::saga_list`]: super::Client::saga_list
    #[derive(Clone)]
    pub struct SagaList<'a> {
        client: &'a super::Client,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::IdSortMode>,
    }

    impl<'a> SagaList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::IdSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to `/sagas`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SagaResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let url = format!("{}/sagas", client.baseurl,);
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to `/sagas`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Saga, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::saga_view`]
    ///
    ///[`Client::saga_view`]: super::Client::saga_view
    #[derive(Clone)]
    pub struct SagaView<'a> {
        client: &'a super::Client,
        saga_id: Option<uuid::Uuid>,
    }

    impl<'a> SagaView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                saga_id: None,
            }
        }

        pub fn saga_id(mut self, value: uuid::Uuid) -> Self {
            self.saga_id = Some(value);
            self
        }

        ///Sends a `GET` request to `/sagas/{saga_id}`
        pub async fn send(self) -> Result<ResponseValue<types::Saga>, Error<types::Error>> {
            let Self { client, saga_id } = self;
            let (saga_id,) = match (saga_id,) {
                (Some(saga_id),) => (saga_id,),
                (saga_id,) => {
                    let mut missing = Vec::new();
                    if saga_id.is_none() {
                        missing.push(stringify!(saga_id));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/sagas/{}",
                client.baseurl,
                encode_path(&saga_id.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::session_me`]
    ///
    ///[`Client::session_me`]: super::Client::session_me
    #[derive(Clone)]
    pub struct SessionMe<'a> {
        client: &'a super::Client,
    }

    impl<'a> SessionMe<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client }
        }

        ///Sends a `GET` request to `/session/me`
        pub async fn send(self) -> Result<ResponseValue<types::User>, Error<types::Error>> {
            let Self { client } = self;
            let url = format!("{}/session/me", client.baseurl,);
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::session_sshkey_list`]
    ///
    ///[`Client::session_sshkey_list`]: super::Client::session_sshkey_list
    #[derive(Clone)]
    pub struct SessionSshkeyList<'a> {
        client: &'a super::Client,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameSortMode>,
    }

    impl<'a> SessionSshkeyList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to `/session/me/sshkeys`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SshKeyResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let url = format!("{}/session/me/sshkeys", client.baseurl,);
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to `/session/me/sshkeys`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::SshKey, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::session_sshkey_create`]
    ///
    ///[`Client::session_sshkey_create`]: super::Client::session_sshkey_create
    #[derive(Clone)]
    pub struct SessionSshkeyCreate<'a> {
        client: &'a super::Client,
        body: Option<types::SshKeyCreate>,
    }

    impl<'a> SessionSshkeyCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, body: None }
        }

        pub fn body(mut self, value: types::SshKeyCreate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to `/session/me/sshkeys`
        pub async fn send(self) -> Result<ResponseValue<types::SshKey>, Error<types::Error>> {
            let Self { client, body } = self;
            let (body,) = match (body,) {
                (Some(body),) => (body,),
                (body,) => {
                    let mut missing = Vec::new();
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!("{}/session/me/sshkeys", client.baseurl,);
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::session_sshkey_view`]
    ///
    ///[`Client::session_sshkey_view`]: super::Client::session_sshkey_view
    #[derive(Clone)]
    pub struct SessionSshkeyView<'a> {
        client: &'a super::Client,
        ssh_key_name: Option<types::Name>,
    }

    impl<'a> SessionSshkeyView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                ssh_key_name: None,
            }
        }

        pub fn ssh_key_name(mut self, value: types::Name) -> Self {
            self.ssh_key_name = Some(value);
            self
        }

        ///Sends a `GET` request to `/session/me/sshkeys/{ssh_key_name}`
        pub async fn send(self) -> Result<ResponseValue<types::SshKey>, Error<types::Error>> {
            let Self {
                client,
                ssh_key_name,
            } = self;
            let (ssh_key_name,) = match (ssh_key_name,) {
                (Some(ssh_key_name),) => (ssh_key_name,),
                (ssh_key_name,) => {
                    let mut missing = Vec::new();
                    if ssh_key_name.is_none() {
                        missing.push(stringify!(ssh_key_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/session/me/sshkeys/{}",
                client.baseurl,
                encode_path(&ssh_key_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::session_sshkey_delete`]
    ///
    ///[`Client::session_sshkey_delete`]: super::Client::session_sshkey_delete
    #[derive(Clone)]
    pub struct SessionSshkeyDelete<'a> {
        client: &'a super::Client,
        ssh_key_name: Option<types::Name>,
    }

    impl<'a> SessionSshkeyDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                ssh_key_name: None,
            }
        }

        pub fn ssh_key_name(mut self, value: types::Name) -> Self {
            self.ssh_key_name = Some(value);
            self
        }

        ///Sends a `DELETE` request to `/session/me/sshkeys/{ssh_key_name}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                ssh_key_name,
            } = self;
            let (ssh_key_name,) = match (ssh_key_name,) {
                (Some(ssh_key_name),) => (ssh_key_name,),
                (ssh_key_name,) => {
                    let mut missing = Vec::new();
                    if ssh_key_name.is_none() {
                        missing.push(stringify!(ssh_key_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/session/me/sshkeys/{}",
                client.baseurl,
                encode_path(&ssh_key_name.to_string()),
            );
            let request = client.client.delete(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::silo_list`]
    ///
    ///[`Client::silo_list`]: super::Client::silo_list
    #[derive(Clone)]
    pub struct SiloList<'a> {
        client: &'a super::Client,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameOrIdSortMode>,
    }

    impl<'a> SiloList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameOrIdSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to `/silos`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SiloResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let url = format!("{}/silos", client.baseurl,);
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to `/silos`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Silo, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::silo_create`]
    ///
    ///[`Client::silo_create`]: super::Client::silo_create
    #[derive(Clone)]
    pub struct SiloCreate<'a> {
        client: &'a super::Client,
        body: Option<types::SiloCreate>,
    }

    impl<'a> SiloCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client, body: None }
        }

        pub fn body(mut self, value: types::SiloCreate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to `/silos`
        pub async fn send(self) -> Result<ResponseValue<types::Silo>, Error<types::Error>> {
            let Self { client, body } = self;
            let (body,) = match (body,) {
                (Some(body),) => (body,),
                (body,) => {
                    let mut missing = Vec::new();
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!("{}/silos", client.baseurl,);
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::silo_view`]
    ///
    ///[`Client::silo_view`]: super::Client::silo_view
    #[derive(Clone)]
    pub struct SiloView<'a> {
        client: &'a super::Client,
        silo_name: Option<types::Name>,
    }

    impl<'a> SiloView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                silo_name: None,
            }
        }

        pub fn silo_name(mut self, value: types::Name) -> Self {
            self.silo_name = Some(value);
            self
        }

        ///Sends a `GET` request to `/silos/{silo_name}`
        pub async fn send(self) -> Result<ResponseValue<types::Silo>, Error<types::Error>> {
            let Self { client, silo_name } = self;
            let (silo_name,) = match (silo_name,) {
                (Some(silo_name),) => (silo_name,),
                (silo_name,) => {
                    let mut missing = Vec::new();
                    if silo_name.is_none() {
                        missing.push(stringify!(silo_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/silos/{}",
                client.baseurl,
                encode_path(&silo_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::silo_delete`]
    ///
    ///[`Client::silo_delete`]: super::Client::silo_delete
    #[derive(Clone)]
    pub struct SiloDelete<'a> {
        client: &'a super::Client,
        silo_name: Option<types::Name>,
    }

    impl<'a> SiloDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                silo_name: None,
            }
        }

        pub fn silo_name(mut self, value: types::Name) -> Self {
            self.silo_name = Some(value);
            self
        }

        ///Sends a `DELETE` request to `/silos/{silo_name}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self { client, silo_name } = self;
            let (silo_name,) = match (silo_name,) {
                (Some(silo_name),) => (silo_name,),
                (silo_name,) => {
                    let mut missing = Vec::new();
                    if silo_name.is_none() {
                        missing.push(stringify!(silo_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/silos/{}",
                client.baseurl,
                encode_path(&silo_name.to_string()),
            );
            let request = client.client.delete(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::silo_identity_provider_list`]
    ///
    ///[`Client::silo_identity_provider_list`]: super::Client::silo_identity_provider_list
    #[derive(Clone)]
    pub struct SiloIdentityProviderList<'a> {
        client: &'a super::Client,
        silo_name: Option<types::Name>,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameSortMode>,
    }

    impl<'a> SiloIdentityProviderList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                silo_name: None,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn silo_name(mut self, value: types::Name) -> Self {
            self.silo_name = Some(value);
            self
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to `/silos/{silo_name}/identity-providers`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::IdentityProviderResultsPage>, Error<types::Error>>
        {
            let Self {
                client,
                silo_name,
                limit,
                page_token,
                sort_by,
            } = self;
            let (silo_name,) = match (silo_name,) {
                (Some(silo_name),) => (silo_name,),
                (silo_name,) => {
                    let mut missing = Vec::new();
                    if silo_name.is_none() {
                        missing.push(stringify!(silo_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/silos/{}/identity-providers",
                client.baseurl,
                encode_path(&silo_name.to_string()),
            );
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to `/silos/{silo_name}/identity-providers`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::IdentityProvider, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::silo_policy_view`]
    ///
    ///[`Client::silo_policy_view`]: super::Client::silo_policy_view
    #[derive(Clone)]
    pub struct SiloPolicyView<'a> {
        client: &'a super::Client,
        silo_name: Option<types::Name>,
    }

    impl<'a> SiloPolicyView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                silo_name: None,
            }
        }

        pub fn silo_name(mut self, value: types::Name) -> Self {
            self.silo_name = Some(value);
            self
        }

        ///Sends a `GET` request to `/silos/{silo_name}/policy`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SiloRolePolicy>, Error<types::Error>> {
            let Self { client, silo_name } = self;
            let (silo_name,) = match (silo_name,) {
                (Some(silo_name),) => (silo_name,),
                (silo_name,) => {
                    let mut missing = Vec::new();
                    if silo_name.is_none() {
                        missing.push(stringify!(silo_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/silos/{}/policy",
                client.baseurl,
                encode_path(&silo_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::silo_policy_update`]
    ///
    ///[`Client::silo_policy_update`]: super::Client::silo_policy_update
    #[derive(Clone)]
    pub struct SiloPolicyUpdate<'a> {
        client: &'a super::Client,
        silo_name: Option<types::Name>,
        body: Option<types::SiloRolePolicy>,
    }

    impl<'a> SiloPolicyUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                silo_name: None,
                body: None,
            }
        }

        pub fn silo_name(mut self, value: types::Name) -> Self {
            self.silo_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::SiloRolePolicy) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `PUT` request to `/silos/{silo_name}/policy`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SiloRolePolicy>, Error<types::Error>> {
            let Self {
                client,
                silo_name,
                body,
            } = self;
            let (silo_name, body) = match (silo_name, body) {
                (Some(silo_name), Some(body)) => (silo_name, body),
                (silo_name, body) => {
                    let mut missing = Vec::new();
                    if silo_name.is_none() {
                        missing.push(stringify!(silo_name));
                    }
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/silos/{}/policy",
                client.baseurl,
                encode_path(&silo_name.to_string()),
            );
            let request = client.client.put(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::silo_identity_provider_create`]
    ///
    ///[`Client::silo_identity_provider_create`]: super::Client::silo_identity_provider_create
    #[derive(Clone)]
    pub struct SiloIdentityProviderCreate<'a> {
        client: &'a super::Client,
        silo_name: Option<types::Name>,
        body: Option<types::SamlIdentityProviderCreate>,
    }

    impl<'a> SiloIdentityProviderCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                silo_name: None,
                body: None,
            }
        }

        pub fn silo_name(mut self, value: types::Name) -> Self {
            self.silo_name = Some(value);
            self
        }

        pub fn body(mut self, value: types::SamlIdentityProviderCreate) -> Self {
            self.body = Some(value);
            self
        }

        ///Sends a `POST` request to
        /// `/silos/{silo_name}/saml-identity-providers`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SamlIdentityProvider>, Error<types::Error>> {
            let Self {
                client,
                silo_name,
                body,
            } = self;
            let (silo_name, body) = match (silo_name, body) {
                (Some(silo_name), Some(body)) => (silo_name, body),
                (silo_name, body) => {
                    let mut missing = Vec::new();
                    if silo_name.is_none() {
                        missing.push(stringify!(silo_name));
                    }
                    if body.is_none() {
                        missing.push(stringify!(body));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/silos/{}/saml-identity-providers",
                client.baseurl,
                encode_path(&silo_name.to_string()),
            );
            let request = client.client.post(url).json(&body).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::silo_identity_provider_view`]
    ///
    ///[`Client::silo_identity_provider_view`]: super::Client::silo_identity_provider_view
    #[derive(Clone)]
    pub struct SiloIdentityProviderView<'a> {
        client: &'a super::Client,
        silo_name: Option<types::Name>,
        provider_name: Option<types::Name>,
    }

    impl<'a> SiloIdentityProviderView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                silo_name: None,
                provider_name: None,
            }
        }

        pub fn silo_name(mut self, value: types::Name) -> Self {
            self.silo_name = Some(value);
            self
        }

        pub fn provider_name(mut self, value: types::Name) -> Self {
            self.provider_name = Some(value);
            self
        }

        ///Sends a `GET` request to
        /// `/silos/{silo_name}/saml-identity-providers/{provider_name}`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SamlIdentityProvider>, Error<types::Error>> {
            let Self {
                client,
                silo_name,
                provider_name,
            } = self;
            let (silo_name, provider_name) = match (silo_name, provider_name) {
                (Some(silo_name), Some(provider_name)) => (silo_name, provider_name),
                (silo_name, provider_name) => {
                    let mut missing = Vec::new();
                    if silo_name.is_none() {
                        missing.push(stringify!(silo_name));
                    }
                    if provider_name.is_none() {
                        missing.push(stringify!(provider_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/silos/{}/saml-identity-providers/{}",
                client.baseurl,
                encode_path(&silo_name.to_string()),
                encode_path(&provider_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::system_user_list`]
    ///
    ///[`Client::system_user_list`]: super::Client::system_user_list
    #[derive(Clone)]
    pub struct SystemUserList<'a> {
        client: &'a super::Client,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::NameSortMode>,
    }

    impl<'a> SystemUserList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::NameSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to `/system/user`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::UserBuiltinResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let url = format!("{}/system/user", client.baseurl,);
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to `/system/user`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::UserBuiltin, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::system_user_view`]
    ///
    ///[`Client::system_user_view`]: super::Client::system_user_view
    #[derive(Clone)]
    pub struct SystemUserView<'a> {
        client: &'a super::Client,
        user_name: Option<types::Name>,
    }

    impl<'a> SystemUserView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                user_name: None,
            }
        }

        pub fn user_name(mut self, value: types::Name) -> Self {
            self.user_name = Some(value);
            self
        }

        ///Sends a `GET` request to `/system/user/{user_name}`
        pub async fn send(self) -> Result<ResponseValue<types::UserBuiltin>, Error<types::Error>> {
            let Self { client, user_name } = self;
            let (user_name,) = match (user_name,) {
                (Some(user_name),) => (user_name,),
                (user_name,) => {
                    let mut missing = Vec::new();
                    if user_name.is_none() {
                        missing.push(stringify!(user_name));
                    }
                    return Err(super::Error::InvalidRequest(format!(
                        "the following parameters are required: {}",
                        missing.join(", "),
                    )));
                }
            };
            let url = format!(
                "{}/system/user/{}",
                client.baseurl,
                encode_path(&user_name.to_string()),
            );
            let request = client.client.get(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::timeseries_schema_get`]
    ///
    ///[`Client::timeseries_schema_get`]: super::Client::timeseries_schema_get
    #[derive(Clone)]
    pub struct TimeseriesSchemaGet<'a> {
        client: &'a super::Client,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
    }

    impl<'a> TimeseriesSchemaGet<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                limit: None,
                page_token: None,
            }
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        ///Sends a `GET` request to `/timeseries/schema`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::TimeseriesSchemaResultsPage>, Error<types::Error>>
        {
            let Self {
                client,
                limit,
                page_token,
            } = self;
            let url = format!("{}/timeseries/schema", client.baseurl,);
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to `/timeseries/schema`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::TimeseriesSchema, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }

    ///Builder for [`Client::updates_refresh`]
    ///
    ///[`Client::updates_refresh`]: super::Client::updates_refresh
    #[derive(Clone)]
    pub struct UpdatesRefresh<'a> {
        client: &'a super::Client,
    }

    impl<'a> UpdatesRefresh<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client }
        }

        ///Sends a `POST` request to `/updates/refresh`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self { client } = self;
            let url = format!("{}/updates/refresh", client.baseurl,);
            let request = client.client.post(url).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    ///Builder for [`Client::user_list`]
    ///
    ///[`Client::user_list`]: super::Client::user_list
    #[derive(Clone)]
    pub struct UserList<'a> {
        client: &'a super::Client,
        limit: Option<std::num::NonZeroU32>,
        page_token: Option<String>,
        sort_by: Option<types::IdSortMode>,
    }

    impl<'a> UserList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client,
                limit: None,
                page_token: None,
                sort_by: None,
            }
        }

        pub fn limit(mut self, value: std::num::NonZeroU32) -> Self {
            self.limit = Some(value);
            self
        }

        pub fn page_token(mut self, value: String) -> Self {
            self.page_token = Some(value);
            self
        }

        pub fn sort_by(mut self, value: types::IdSortMode) -> Self {
            self.sort_by = Some(value);
            self
        }

        ///Sends a `GET` request to `/users`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::UserResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let url = format!("{}/users", client.baseurl,);
            let mut query = Vec::new();
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client.client.get(url).query(&query).build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        ///Streams `GET` requests to `/users`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::User, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let next = Self {
                limit: None,
                page_token: None,
                sort_by: None,
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items.into_iter().map(Ok));
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: next_page,
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items.into_iter().map(Ok)),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .boxed()
        }
    }
}
